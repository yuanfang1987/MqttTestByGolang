// Code generated by protoc-gen-go.
// source: PushMsg.proto
// DO NOT EDIT!

/*
Package templ is a generated protocol buffer package.

It is generated from these files:
	PushMsg.proto

It has these top-level messages:
	CMsg
	CMsgHead
	Slot
	Battery
	Device
	CMsgBodyDeviceStatus
	CMsgBodyDeviceOpen
	CMsgBodyDeviceAck
	CMsgBodyUpgrade
	CMsgBodyUpgradeAck
	CMsgBodyDeviceUpdate
	CMsgBodyWifiSetupInfo
	CMsgBodyWifiSetupAck
	CMsgBodyInstallBatteryResult
	CMsgBodyGetBatteryPassword
	CMsgBodyGetBatteryPasswordAck
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 消息命令枚举
type CMD int32

const (
	CMD_STATUSREQ             CMD = 1
	CMD_STATUSRES             CMD = 2
	CMD_OPENDEV               CMD = 3
	CMD_OPENACK               CMD = 4
	CMD_SETUPWIFI             CMD = 5
	CMD_SETUPWIFIACK          CMD = 6
	CMD_UPGRADE               CMD = 7
	CMD_STARTINSTALLBATTERY   CMD = 8
	CMD_STOPINSTALLBATTERY    CMD = 9
	CMD_INSTALLBATTERYRESULT  CMD = 10
	CMD_GETBATTERYPASSWORD    CMD = 11
	CMD_GETBATTERYPASSWORDACK CMD = 12
	CMD_UPDATEDEVICEPARAMS    CMD = 13
	CMD_SETUPGSM              CMD = 14
	CMD_SETUPGSMACK           CMD = 15
	CMD_UPLOADGSMFLOW         CMD = 16
	CMD_UPLOADGSMFLOWACK      CMD = 17
)

var CMD_name = map[int32]string{
	1:  "STATUSREQ",
	2:  "STATUSRES",
	3:  "OPENDEV",
	4:  "OPENACK",
	5:  "SETUPWIFI",
	6:  "SETUPWIFIACK",
	7:  "UPGRADE",
	8:  "STARTINSTALLBATTERY",
	9:  "STOPINSTALLBATTERY",
	10: "INSTALLBATTERYRESULT",
	11: "GETBATTERYPASSWORD",
	12: "GETBATTERYPASSWORDACK",
	13: "UPDATEDEVICEPARAMS",
}
var CMD_value = map[string]int32{
	"STATUSREQ":             1,
	"STATUSRES":             2,
	"OPENDEV":               3,
	"OPENACK":               4,
	"SETUPWIFI":             5,
	"SETUPWIFIACK":          6,
	"UPGRADE":               7,
	"STARTINSTALLBATTERY":   8,
	"STOPINSTALLBATTERY":    9,
	"INSTALLBATTERYRESULT":  10,
	"GETBATTERYPASSWORD":    11,
	"GETBATTERYPASSWORDACK": 12,
	"UPDATEDEVICEPARAMS":    13,
}

func (x CMD) Enum() *CMD {
	p := new(CMD)
	*p = x
	return p
}
func (x CMD) String() string {
	return proto.EnumName(CMD_name, int32(x))
}
func (x *CMD) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_value, data, "CMD")
	if err != nil {
		return err
	}
	*x = CMD(value)
	return nil
}

// 2.实体列表
// 2.1.卡槽
type HEART_BEAT_DEVICE_CODE int32

const (
	HEART_BEAT_DEVICE_CODE_HBD_STATUS_OK         HEART_BEAT_DEVICE_CODE = 0
	HEART_BEAT_DEVICE_CODE_HBD_TEMPERATURE_ERROR HEART_BEAT_DEVICE_CODE = 1
	HEART_BEAT_DEVICE_CODE_HBD_WIFI_ERROR        HEART_BEAT_DEVICE_CODE = 2
	HEART_BEAT_DEVICE_CODE_HBD_BLUE_ERROR        HEART_BEAT_DEVICE_CODE = 3
	HEART_BEAT_DEVICE_CODE_HBD_IBEACON_ERROR     HEART_BEAT_DEVICE_CODE = 4
	HEART_BEAT_DEVICE_CODE_HBD_CONFIG_FILE_ERROR HEART_BEAT_DEVICE_CODE = 5
	HEART_BEAT_DEVICE_CODE_HBD_SYSTEM_ERROR      HEART_BEAT_DEVICE_CODE = 6
	HEART_BEAT_DEVICE_CODE_HBD_OTHER_ERROR       HEART_BEAT_DEVICE_CODE = 7
)

var HEART_BEAT_DEVICE_CODE_name = map[int32]string{
	0: "HBD_STATUS_OK",
	1: "HBD_TEMPERATURE_ERROR",
	2: "HBD_WIFI_ERROR",
	3: "HBD_BLUE_ERROR",
	4: "HBD_IBEACON_ERROR",
	5: "HBD_CONFIG_FILE_ERROR",
	6: "HBD_SYSTEM_ERROR",
	7: "HBD_OTHER_ERROR",
}
var HEART_BEAT_DEVICE_CODE_value = map[string]int32{
	"HBD_STATUS_OK":         0,
	"HBD_TEMPERATURE_ERROR": 1,
	"HBD_WIFI_ERROR":        2,
	"HBD_BLUE_ERROR":        3,
	"HBD_IBEACON_ERROR":     4,
	"HBD_CONFIG_FILE_ERROR": 5,
	"HBD_SYSTEM_ERROR":      6,
	"HBD_OTHER_ERROR":       7,
}

func (x HEART_BEAT_DEVICE_CODE) Enum() *HEART_BEAT_DEVICE_CODE {
	p := new(HEART_BEAT_DEVICE_CODE)
	*p = x
	return p
}
func (x HEART_BEAT_DEVICE_CODE) String() string {
	return proto.EnumName(HEART_BEAT_DEVICE_CODE_name, int32(x))
}
func (x *HEART_BEAT_DEVICE_CODE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HEART_BEAT_DEVICE_CODE_value, data, "HEART_BEAT_DEVICE_CODE")
	if err != nil {
		return err
	}
	*x = HEART_BEAT_DEVICE_CODE(value)
	return nil
}

type HEART_BEAT_SLOT_CODE int32

const (
	HEART_BEAT_SLOT_CODE_HBS_STATUS_OK                   HEART_BEAT_SLOT_CODE = 0  //正常成功
	HEART_BEAT_SLOT_CODE_HBS_REPAIR_OK                   HEART_BEAT_SLOT_CODE = 1  //重新修复后成功
	HEART_BEAT_SLOT_CODE_HBS_VOLTAGE_ERROR               HEART_BEAT_SLOT_CODE = 2  //电压错误
	HEART_BEAT_SLOT_CODE_HBS_CURRENT_ERROR               HEART_BEAT_SLOT_CODE = 3  //电流错误
	HEART_BEAT_SLOT_CODE_HBS_OTHER_ERROR                 HEART_BEAT_SLOT_CODE = 4  //其他错误
	HEART_BEAT_SLOT_CODE_HBS_MCU_ERROR                   HEART_BEAT_SLOT_CODE = 5  //mcu错误，判定卡槽不可用
	HEART_BEAT_SLOT_CODE_HBS_SN_N_CONTACT_Y_DOOR_Y_ERROR HEART_BEAT_SLOT_CODE = 6  //sn为空，舱底压住，仓门压住
	HEART_BEAT_SLOT_CODE_HBS_SN_N_CONTACT_Y_DOOR_N_ERROR HEART_BEAT_SLOT_CODE = 7  //sn为空，舱底压住，仓门没有压住
	HEART_BEAT_SLOT_CODE_HBS_SN_N_CONTACT_N_DOOR_Y_ERROR HEART_BEAT_SLOT_CODE = 8  //sn为空，舱底没有压住，仓门压住
	HEART_BEAT_SLOT_CODE_HBS_SN_N_CONTACT_N_DOOR_N_ERROR HEART_BEAT_SLOT_CODE = 9  //sn为空，舱底没有压住，仓门没有压住
	HEART_BEAT_SLOT_CODE_HBS_SN_Y_CONTACT_Y_DOOR_Y_ERROR HEART_BEAT_SLOT_CODE = 10 //sn正常，舱底压住，仓门压住
	HEART_BEAT_SLOT_CODE_HBS_SN_Y_CONTACT_Y_DOOR_N_ERROR HEART_BEAT_SLOT_CODE = 11 //sn正常，舱底压住，仓门没有压住
	HEART_BEAT_SLOT_CODE_HBS_SN_Y_CONTACT_N_DOOR_Y_ERROR HEART_BEAT_SLOT_CODE = 12 //sn正常，舱底没有压住，仓门压住
	HEART_BEAT_SLOT_CODE_HBS_SN_Y_CONTACT_N_DOOR_N_ERROR HEART_BEAT_SLOT_CODE = 13 //sn正常，舱底没有压住，仓门没有压住
)

var HEART_BEAT_SLOT_CODE_name = map[int32]string{
	0:  "HBS_STATUS_OK",
	1:  "HBS_REPAIR_OK",
	2:  "HBS_VOLTAGE_ERROR",
	3:  "HBS_CURRENT_ERROR",
	4:  "HBS_OTHER_ERROR",
	5:  "HBS_MCU_ERROR",
	6:  "HBS_SN_N_CONTACT_Y_DOOR_Y_ERROR",
	7:  "HBS_SN_N_CONTACT_Y_DOOR_N_ERROR",
	8:  "HBS_SN_N_CONTACT_N_DOOR_Y_ERROR",
	9:  "HBS_SN_N_CONTACT_N_DOOR_N_ERROR",
	10: "HBS_SN_Y_CONTACT_Y_DOOR_Y_ERROR",
	11: "HBS_SN_Y_CONTACT_Y_DOOR_N_ERROR",
	12: "HBS_SN_Y_CONTACT_N_DOOR_Y_ERROR",
	13: "HBS_SN_Y_CONTACT_N_DOOR_N_ERROR",
}
var HEART_BEAT_SLOT_CODE_value = map[string]int32{
	"HBS_STATUS_OK":                   0,
	"HBS_REPAIR_OK":                   1,
	"HBS_VOLTAGE_ERROR":               2,
	"HBS_CURRENT_ERROR":               3,
	"HBS_OTHER_ERROR":                 4,
	"HBS_MCU_ERROR":                   5,
	"HBS_SN_N_CONTACT_Y_DOOR_Y_ERROR": 6,
	"HBS_SN_N_CONTACT_Y_DOOR_N_ERROR": 7,
	"HBS_SN_N_CONTACT_N_DOOR_Y_ERROR": 8,
	"HBS_SN_N_CONTACT_N_DOOR_N_ERROR": 9,
	"HBS_SN_Y_CONTACT_Y_DOOR_Y_ERROR": 10,
	"HBS_SN_Y_CONTACT_Y_DOOR_N_ERROR": 11,
	"HBS_SN_Y_CONTACT_N_DOOR_Y_ERROR": 12,
	"HBS_SN_Y_CONTACT_N_DOOR_N_ERROR": 13,
}

func (x HEART_BEAT_SLOT_CODE) Enum() *HEART_BEAT_SLOT_CODE {
	p := new(HEART_BEAT_SLOT_CODE)
	*p = x
	return p
}
func (x HEART_BEAT_SLOT_CODE) String() string {
	return proto.EnumName(HEART_BEAT_SLOT_CODE_name, int32(x))
}
func (x *HEART_BEAT_SLOT_CODE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HEART_BEAT_SLOT_CODE_value, data, "HEART_BEAT_SLOT_CODE")
	if err != nil {
		return err
	}
	*x = HEART_BEAT_SLOT_CODE(value)
	return nil
}

type HEART_BEAT_BATTERY_CODE int32

const (
	HEART_BEAT_BATTERY_CODE_HBB_STATUS_OK         HEART_BEAT_BATTERY_CODE = 0
	HEART_BEAT_BATTERY_CODE_HBB_OTHER_ERROR       HEART_BEAT_BATTERY_CODE = 1
	HEART_BEAT_BATTERY_CODE_HBB_TEMPERATURE_ERROR HEART_BEAT_BATTERY_CODE = 2
	HEART_BEAT_BATTERY_CODE_HBB_VOLTAGE_ERROR     HEART_BEAT_BATTERY_CODE = 3
	HEART_BEAT_BATTERY_CODE_HBB_CURRENT_ERROR     HEART_BEAT_BATTERY_CODE = 4
	HEART_BEAT_BATTERY_CODE_HBB_CYCLECOUNT_ERROR  HEART_BEAT_BATTERY_CODE = 5
	HEART_BEAT_BATTERY_CODE_HBB_INTERFACE_ERROR   HEART_BEAT_BATTERY_CODE = 6
)

var HEART_BEAT_BATTERY_CODE_name = map[int32]string{
	0: "HBB_STATUS_OK",
	1: "HBB_OTHER_ERROR",
	2: "HBB_TEMPERATURE_ERROR",
	3: "HBB_VOLTAGE_ERROR",
	4: "HBB_CURRENT_ERROR",
	5: "HBB_CYCLECOUNT_ERROR",
	6: "HBB_INTERFACE_ERROR",
}
var HEART_BEAT_BATTERY_CODE_value = map[string]int32{
	"HBB_STATUS_OK":         0,
	"HBB_OTHER_ERROR":       1,
	"HBB_TEMPERATURE_ERROR": 2,
	"HBB_VOLTAGE_ERROR":     3,
	"HBB_CURRENT_ERROR":     4,
	"HBB_CYCLECOUNT_ERROR":  5,
	"HBB_INTERFACE_ERROR":   6,
}

func (x HEART_BEAT_BATTERY_CODE) Enum() *HEART_BEAT_BATTERY_CODE {
	p := new(HEART_BEAT_BATTERY_CODE)
	*p = x
	return p
}
func (x HEART_BEAT_BATTERY_CODE) String() string {
	return proto.EnumName(HEART_BEAT_BATTERY_CODE_name, int32(x))
}
func (x *HEART_BEAT_BATTERY_CODE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(HEART_BEAT_BATTERY_CODE_value, data, "HEART_BEAT_BATTERY_CODE")
	if err != nil {
		return err
	}
	*x = HEART_BEAT_BATTERY_CODE(value)
	return nil
}

type ENABLE_BORROW_STATUS int32

const (
	ENABLE_BORROW_STATUS_ENABLE_STATUS  ENABLE_BORROW_STATUS = 0
	ENABLE_BORROW_STATUS_DISABLE_STATUS ENABLE_BORROW_STATUS = 1
)

var ENABLE_BORROW_STATUS_name = map[int32]string{
	0: "ENABLE_STATUS",
	1: "DISABLE_STATUS",
}
var ENABLE_BORROW_STATUS_value = map[string]int32{
	"ENABLE_STATUS":  0,
	"DISABLE_STATUS": 1,
}

func (x ENABLE_BORROW_STATUS) Enum() *ENABLE_BORROW_STATUS {
	p := new(ENABLE_BORROW_STATUS)
	*p = x
	return p
}
func (x ENABLE_BORROW_STATUS) String() string {
	return proto.EnumName(ENABLE_BORROW_STATUS_name, int32(x))
}
func (x *ENABLE_BORROW_STATUS) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ENABLE_BORROW_STATUS_value, data, "ENABLE_BORROW_STATUS")
	if err != nil {
		return err
	}
	*x = ENABLE_BORROW_STATUS(value)
	return nil
}

// 3.2.借还
// 柜机动作类型枚举
type DEVACTION int32

const (
	DEVACTION_BORROW DEVACTION = 1
	DEVACTION_RETURN DEVACTION = 2
)

var DEVACTION_name = map[int32]string{
	1: "BORROW",
	2: "RETURN",
}
var DEVACTION_value = map[string]int32{
	"BORROW": 1,
	"RETURN": 2,
}

func (x DEVACTION) Enum() *DEVACTION {
	p := new(DEVACTION)
	*p = x
	return p
}
func (x DEVACTION) String() string {
	return proto.EnumName(DEVACTION_name, int32(x))
}
func (x *DEVACTION) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DEVACTION_value, data, "DEVACTION")
	if err != nil {
		return err
	}
	*x = DEVACTION(value)
	return nil
}

type BATTERY_BORROW_RETURN_CODE int32

const (
	BATTERY_BORROW_RETURN_CODE_BBR_STATUS_OK               BATTERY_BORROW_RETURN_CODE = 0
	BATTERY_BORROW_RETURN_CODE_BBR_REQUEST_INVALID         BATTERY_BORROW_RETURN_CODE = 1
	BATTERY_BORROW_RETURN_CODE_BBR_REQUEST_REPEAT          BATTERY_BORROW_RETURN_CODE = 2
	BATTERY_BORROW_RETURN_CODE_BBR_REQUEST_NEED_WAIT       BATTERY_BORROW_RETURN_CODE = 3
	BATTERY_BORROW_RETURN_CODE_BBR_SLOT_BLANK              BATTERY_BORROW_RETURN_CODE = 4
	BATTERY_BORROW_RETURN_CODE_BBR_SLOT_NOT_BLANK          BATTERY_BORROW_RETURN_CODE = 5
	BATTERY_BORROW_RETURN_CODE_BBR_SLOT_NOT_FETCH_BACK     BATTERY_BORROW_RETURN_CODE = 6
	BATTERY_BORROW_RETURN_CODE_BBR_SLOT_NOT_FETCH_NOT_BACK BATTERY_BORROW_RETURN_CODE = 7
	BATTERY_BORROW_RETURN_CODE_BBR_SLOT_NOT_PLUGIN         BATTERY_BORROW_RETURN_CODE = 8
	BATTERY_BORROW_RETURN_CODE_BBR_SLOT_NOT_RECOGNIZE      BATTERY_BORROW_RETURN_CODE = 9
	// 技术性错误，需要重启MCU。卡槽坏的，能明确的需要单独命名，否则直接设置为
	// 服务器记录连续发生两次，则自动锁死该卡槽
	BATTERY_BORROW_RETURN_CODE_BBR_SLOT_FAIL                              BATTERY_BORROW_RETURN_CODE = 16
	BATTERY_BORROW_RETURN_CODE_BBR_SLOT_FAIL_MCU_ERROR_BMS                BATTERY_BORROW_RETURN_CODE = 17
	BATTERY_BORROW_RETURN_CODE_BBR_SLOT_FAIL_MCU_ERROR_LED                BATTERY_BORROW_RETURN_CODE = 18
	BATTERY_BORROW_RETURN_CODE_BBR_SLOT_FAIL_MCU_ERROR_MOTOR              BATTERY_BORROW_RETURN_CODE = 19
	BATTERY_BORROW_RETURN_CODE_BBR_SLOT_FAIL_MCU_ERROR_SWITCH_DOOR        BATTERY_BORROW_RETURN_CODE = 20
	BATTERY_BORROW_RETURN_CODE_BBR_SLOT_FAIL_MCU_ERROR_SWITCH_CONTACT     BATTERY_BORROW_RETURN_CODE = 21
	BATTERY_BORROW_RETURN_CODE_BBR_SLOT_FAIL_MCU_ERROR_ELECT              BATTERY_BORROW_RETURN_CODE = 22
	BATTERY_BORROW_RETURN_CODE_BBR_SLOT_FAIL_MCU_ERROR_MOBILE_POWER_OPEN  BATTERY_BORROW_RETURN_CODE = 23
	BATTERY_BORROW_RETURN_CODE_BBR_SLOT_FAIL_MCU_ERROR_MOBILE_POWER_CLOSE BATTERY_BORROW_RETURN_CODE = 24
)

var BATTERY_BORROW_RETURN_CODE_name = map[int32]string{
	0:  "BBR_STATUS_OK",
	1:  "BBR_REQUEST_INVALID",
	2:  "BBR_REQUEST_REPEAT",
	3:  "BBR_REQUEST_NEED_WAIT",
	4:  "BBR_SLOT_BLANK",
	5:  "BBR_SLOT_NOT_BLANK",
	6:  "BBR_SLOT_NOT_FETCH_BACK",
	7:  "BBR_SLOT_NOT_FETCH_NOT_BACK",
	8:  "BBR_SLOT_NOT_PLUGIN",
	9:  "BBR_SLOT_NOT_RECOGNIZE",
	16: "BBR_SLOT_FAIL",
	17: "BBR_SLOT_FAIL_MCU_ERROR_BMS",
	18: "BBR_SLOT_FAIL_MCU_ERROR_LED",
	19: "BBR_SLOT_FAIL_MCU_ERROR_MOTOR",
	20: "BBR_SLOT_FAIL_MCU_ERROR_SWITCH_DOOR",
	21: "BBR_SLOT_FAIL_MCU_ERROR_SWITCH_CONTACT",
	22: "BBR_SLOT_FAIL_MCU_ERROR_ELECT",
	23: "BBR_SLOT_FAIL_MCU_ERROR_MOBILE_POWER_OPEN",
	24: "BBR_SLOT_FAIL_MCU_ERROR_MOBILE_POWER_CLOSE",
}
var BATTERY_BORROW_RETURN_CODE_value = map[string]int32{
	"BBR_STATUS_OK":                              0,
	"BBR_REQUEST_INVALID":                        1,
	"BBR_REQUEST_REPEAT":                         2,
	"BBR_REQUEST_NEED_WAIT":                      3,
	"BBR_SLOT_BLANK":                             4,
	"BBR_SLOT_NOT_BLANK":                         5,
	"BBR_SLOT_NOT_FETCH_BACK":                    6,
	"BBR_SLOT_NOT_FETCH_NOT_BACK":                7,
	"BBR_SLOT_NOT_PLUGIN":                        8,
	"BBR_SLOT_NOT_RECOGNIZE":                     9,
	"BBR_SLOT_FAIL":                              16,
	"BBR_SLOT_FAIL_MCU_ERROR_BMS":                17,
	"BBR_SLOT_FAIL_MCU_ERROR_LED":                18,
	"BBR_SLOT_FAIL_MCU_ERROR_MOTOR":              19,
	"BBR_SLOT_FAIL_MCU_ERROR_SWITCH_DOOR":        20,
	"BBR_SLOT_FAIL_MCU_ERROR_SWITCH_CONTACT":     21,
	"BBR_SLOT_FAIL_MCU_ERROR_ELECT":              22,
	"BBR_SLOT_FAIL_MCU_ERROR_MOBILE_POWER_OPEN":  23,
	"BBR_SLOT_FAIL_MCU_ERROR_MOBILE_POWER_CLOSE": 24,
}

func (x BATTERY_BORROW_RETURN_CODE) Enum() *BATTERY_BORROW_RETURN_CODE {
	p := new(BATTERY_BORROW_RETURN_CODE)
	*p = x
	return p
}
func (x BATTERY_BORROW_RETURN_CODE) String() string {
	return proto.EnumName(BATTERY_BORROW_RETURN_CODE_name, int32(x))
}
func (x *BATTERY_BORROW_RETURN_CODE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BATTERY_BORROW_RETURN_CODE_value, data, "BATTERY_BORROW_RETURN_CODE")
	if err != nil {
		return err
	}
	*x = BATTERY_BORROW_RETURN_CODE(value)
	return nil
}

// 3.3.柜机升级
type UPGRADESTATUS int32

const (
	UPGRADESTATUS_DOWNLOAD_OK   UPGRADESTATUS = 0
	UPGRADESTATUS_DOWNLOAD_FAIL UPGRADESTATUS = 1
)

var UPGRADESTATUS_name = map[int32]string{
	0: "DOWNLOAD_OK",
	1: "DOWNLOAD_FAIL",
}
var UPGRADESTATUS_value = map[string]int32{
	"DOWNLOAD_OK":   0,
	"DOWNLOAD_FAIL": 1,
}

func (x UPGRADESTATUS) Enum() *UPGRADESTATUS {
	p := new(UPGRADESTATUS)
	*p = x
	return p
}
func (x UPGRADESTATUS) String() string {
	return proto.EnumName(UPGRADESTATUS_name, int32(x))
}
func (x *UPGRADESTATUS) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UPGRADESTATUS_value, data, "UPGRADESTATUS")
	if err != nil {
		return err
	}
	*x = UPGRADESTATUS(value)
	return nil
}

// 3.4.安装WiFi
// Wifi密码类型
type WIFIAUTHMODE int32

const (
	WIFIAUTHMODE_WIFIAUTHMODENONE    WIFIAUTHMODE = 0
	WIFIAUTHMODE_WIFIAUTHMODEWPA     WIFIAUTHMODE = 1
	WIFIAUTHMODE_WIFIAUTHMODEWPAPSK  WIFIAUTHMODE = 2
	WIFIAUTHMODE_WIFIAUTHMODEWPA2    WIFIAUTHMODE = 3
	WIFIAUTHMODE_WIFIAUTHMODEWPA2PSK WIFIAUTHMODE = 4
	WIFIAUTHMODE_WIFIAUTHMODESHARED  WIFIAUTHMODE = 5
)

var WIFIAUTHMODE_name = map[int32]string{
	0: "WIFIAUTHMODENONE",
	1: "WIFIAUTHMODEWPA",
	2: "WIFIAUTHMODEWPAPSK",
	3: "WIFIAUTHMODEWPA2",
	4: "WIFIAUTHMODEWPA2PSK",
	5: "WIFIAUTHMODESHARED",
}
var WIFIAUTHMODE_value = map[string]int32{
	"WIFIAUTHMODENONE":    0,
	"WIFIAUTHMODEWPA":     1,
	"WIFIAUTHMODEWPAPSK":  2,
	"WIFIAUTHMODEWPA2":    3,
	"WIFIAUTHMODEWPA2PSK": 4,
	"WIFIAUTHMODESHARED":  5,
}

func (x WIFIAUTHMODE) Enum() *WIFIAUTHMODE {
	p := new(WIFIAUTHMODE)
	*p = x
	return p
}
func (x WIFIAUTHMODE) String() string {
	return proto.EnumName(WIFIAUTHMODE_name, int32(x))
}
func (x *WIFIAUTHMODE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WIFIAUTHMODE_value, data, "WIFIAUTHMODE")
	if err != nil {
		return err
	}
	*x = WIFIAUTHMODE(value)
	return nil
}

// Wifi密码加密方式
type WIFIENCRYPT int32

const (
	WIFIENCRYPT_WIFIENCRYPTNONE WIFIENCRYPT = 0
	WIFIENCRYPT_WIFIENCRYPTAES  WIFIENCRYPT = 1
	WIFIENCRYPT_WIFIENCRYPTTKIP WIFIENCRYPT = 2
	WIFIENCRYPT_WIFIENCRYPTWEP  WIFIENCRYPT = 3
)

var WIFIENCRYPT_name = map[int32]string{
	0: "WIFIENCRYPTNONE",
	1: "WIFIENCRYPTAES",
	2: "WIFIENCRYPTTKIP",
	3: "WIFIENCRYPTWEP",
}
var WIFIENCRYPT_value = map[string]int32{
	"WIFIENCRYPTNONE": 0,
	"WIFIENCRYPTAES":  1,
	"WIFIENCRYPTTKIP": 2,
	"WIFIENCRYPTWEP":  3,
}

func (x WIFIENCRYPT) Enum() *WIFIENCRYPT {
	p := new(WIFIENCRYPT)
	*p = x
	return p
}
func (x WIFIENCRYPT) String() string {
	return proto.EnumName(WIFIENCRYPT_name, int32(x))
}
func (x *WIFIENCRYPT) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(WIFIENCRYPT_value, data, "WIFIENCRYPT")
	if err != nil {
		return err
	}
	*x = WIFIENCRYPT(value)
	return nil
}

// 联网方式（0:WiFi, 1:蓝牙, 2: 2G, 3: 4G）
type CONNECTNETTYPE int32

const (
	CONNECTNETTYPE_CONNECTNETWIFI CONNECTNETTYPE = 0
	CONNECTNETTYPE_CONNECTNETBLUE CONNECTNETTYPE = 1
	CONNECTNETTYPE_CONNECTNET2G   CONNECTNETTYPE = 2
	CONNECTNETTYPE_CONNECTNET4G   CONNECTNETTYPE = 3
)

var CONNECTNETTYPE_name = map[int32]string{
	0: "CONNECTNETWIFI",
	1: "CONNECTNETBLUE",
	2: "CONNECTNET2G",
}
var CONNECTNETTYPE_value = map[string]int32{
	"CONNECTNETWIFI": 0,
	"CONNECTNETBLUE": 1,
	"CONNECTNET2G":   2,
}

func (x CONNECTNETTYPE) Enum() *CONNECTNETTYPE {
	p := new(CONNECTNETTYPE)
	*p = x
	return p
}
func (x CONNECTNETTYPE) String() string {
	return proto.EnumName(CONNECTNETTYPE_name, int32(x))
}
func (x *CONNECTNETTYPE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CONNECTNETTYPE_value, data, "CONNECTNETTYPE")
	if err != nil {
		return err
	}
	*x = CONNECTNETTYPE(value)
	return nil
}

// server 返回状态码 0网路配置失败,1网路配置成功
type RESCODE int32

const (
	RESCODE_RESCODEFAIL RESCODE = 0
	RESCODE_RESCODESUC  RESCODE = 1
)

var RESCODE_name = map[int32]string{
	0: "RESCODEFAIL",
	1: "RESCODESUC",
}
var RESCODE_value = map[string]int32{
	"RESCODEFAIL": 0,
	"RESCODESUC":  1,
}

func (x RESCODE) Enum() *RESCODE {
	p := new(RESCODE)
	*p = x
	return p
}
func (x RESCODE) String() string {
	return proto.EnumName(RESCODE_name, int32(x))
}
func (x *RESCODE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RESCODE_value, data, "RESCODE")
	if err != nil {
		return err
	}
	*x = RESCODE(value)
	return nil
}

type InstallBatteryOpenCode int32

const (
	InstallBatteryOpenCode_OPENCODEOK   InstallBatteryOpenCode = 1
	InstallBatteryOpenCode_OPENCODEFULL InstallBatteryOpenCode = 2
	InstallBatteryOpenCode_OPENCODEFAIL InstallBatteryOpenCode = 3
)

var InstallBatteryOpenCode_name = map[int32]string{
	1: "OPENCODEOK",
	2: "OPENCODEFULL",
	3: "OPENCODEFAIL",
}
var InstallBatteryOpenCode_value = map[string]int32{
	"OPENCODEOK":   1,
	"OPENCODEFULL": 2,
	"OPENCODEFAIL": 3,
}

func (x InstallBatteryOpenCode) Enum() *InstallBatteryOpenCode {
	p := new(InstallBatteryOpenCode)
	*p = x
	return p
}
func (x InstallBatteryOpenCode) String() string {
	return proto.EnumName(InstallBatteryOpenCode_name, int32(x))
}
func (x *InstallBatteryOpenCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(InstallBatteryOpenCode_value, data, "InstallBatteryOpenCode")
	if err != nil {
		return err
	}
	*x = InstallBatteryOpenCode(value)
	return nil
}

type InstallBatteryResCode int32

const (
	InstallBatteryResCode_RESCODEOK        InstallBatteryResCode = 1
	InstallBatteryResCode_RESCODENOTPLUGIN InstallBatteryResCode = 2
	InstallBatteryResCode_RESCODEERROR     InstallBatteryResCode = 3
)

var InstallBatteryResCode_name = map[int32]string{
	1: "RESCODEOK",
	2: "RESCODENOTPLUGIN",
	3: "RESCODEERROR",
}
var InstallBatteryResCode_value = map[string]int32{
	"RESCODEOK":        1,
	"RESCODENOTPLUGIN": 2,
	"RESCODEERROR":     3,
}

func (x InstallBatteryResCode) Enum() *InstallBatteryResCode {
	p := new(InstallBatteryResCode)
	*p = x
	return p
}
func (x InstallBatteryResCode) String() string {
	return proto.EnumName(InstallBatteryResCode_name, int32(x))
}
func (x *InstallBatteryResCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(InstallBatteryResCode_value, data, "InstallBatteryResCode")
	if err != nil {
		return err
	}
	*x = InstallBatteryResCode(value)
	return nil
}

// 消息模版
type CMsg struct {
	MsgHead                   *CMsgHead                      `protobuf:"bytes,1,req,name=msgHead" json:"msgHead,omitempty"`
	DeviceStatusBody          *CMsgBodyDeviceStatus          `protobuf:"bytes,2,opt,name=deviceStatusBody" json:"deviceStatusBody,omitempty"`
	OpenDeviceBody            *CMsgBodyDeviceOpen            `protobuf:"bytes,3,opt,name=openDeviceBody" json:"openDeviceBody,omitempty"`
	OpenDeviceAckBody         *CMsgBodyDeviceAck             `protobuf:"bytes,4,opt,name=openDeviceAckBody" json:"openDeviceAckBody,omitempty"`
	WifiSetupInfoBody         *CMsgBodyWifiSetupInfo         `protobuf:"bytes,5,opt,name=wifiSetupInfoBody" json:"wifiSetupInfoBody,omitempty"`
	WifiSetupAckBody          *CMsgBodyWifiSetupAck          `protobuf:"bytes,6,opt,name=wifiSetupAckBody" json:"wifiSetupAckBody,omitempty"`
	Upgrade                   *CMsgBodyUpgrade               `protobuf:"bytes,7,opt,name=upgrade" json:"upgrade,omitempty"`
	InstallBatteryResult      *CMsgBodyInstallBatteryResult  `protobuf:"bytes,8,opt,name=installBatteryResult" json:"installBatteryResult,omitempty"`
	GetBatteryPasswordBody    *CMsgBodyGetBatteryPassword    `protobuf:"bytes,9,opt,name=getBatteryPasswordBody" json:"getBatteryPasswordBody,omitempty"`
	GetBatteryPasswordAckBody *CMsgBodyGetBatteryPasswordAck `protobuf:"bytes,10,opt,name=getBatteryPasswordAckBody" json:"getBatteryPasswordAckBody,omitempty"`
	UpgradeAck                *CMsgBodyUpgradeAck            `protobuf:"bytes,11,opt,name=upgradeAck" json:"upgradeAck,omitempty"`
	UpdateDeviceBody          *CMsgBodyDeviceUpdate          `protobuf:"bytes,12,opt,name=updateDeviceBody" json:"updateDeviceBody,omitempty"`
	GsmSetupInfoBody          *CMsgBodyGsmSetupInfo          `protobuf:"bytes,13,opt,name=gsmSetupInfoBody" json:"gsmSetupInfoBody,omitempty"`
	GsmSetupAckBody           *CMsgBodyGsmSetupAck           `protobuf:"bytes,14,opt,name=gsmSetupAckBody" json:"gsmSetupAckBody,omitempty"`
	GsmFlowLogInfoBody        *CMsgBodyGsmFlowInfo           `protobuf:"bytes,15,opt,name=gsmFlowInfoBody" json:"gsmFlowInfoBody,omitempty"`
	GsmFlowAckBody            *CMsgBodyGsmFlowAck            `protobuf:"bytes,16,opt,name=gsmFlowAckBody" json:"gsmFlowAckBody,omitempty"`
	XXX_unrecognized          []byte                         `json:"-"`
}

func (m *CMsg) Reset()         { *m = CMsg{} }
func (m *CMsg) String() string { return proto.CompactTextString(m) }
func (*CMsg) ProtoMessage()    {}

func (m *CMsg) GetMsgHead() *CMsgHead {
	if m != nil {
		return m.MsgHead
	}
	return nil
}

func (m *CMsg) GetDeviceStatusBody() *CMsgBodyDeviceStatus {
	if m != nil {
		return m.DeviceStatusBody
	}
	return nil
}

func (m *CMsg) GetOpenDeviceBody() *CMsgBodyDeviceOpen {
	if m != nil {
		return m.OpenDeviceBody
	}
	return nil
}

func (m *CMsg) GetOpenDeviceAckBody() *CMsgBodyDeviceAck {
	if m != nil {
		return m.OpenDeviceAckBody
	}
	return nil
}

func (m *CMsg) GetWifiSetupInfoBody() *CMsgBodyWifiSetupInfo {
	if m != nil {
		return m.WifiSetupInfoBody
	}
	return nil
}

func (m *CMsg) GetWifiSetupAckBody() *CMsgBodyWifiSetupAck {
	if m != nil {
		return m.WifiSetupAckBody
	}
	return nil
}

func (m *CMsg) Get2GSetupInfoBody() *CMsgBodyGsmSetupInfo {
	if m != nil {
		return m.GsmSetupInfoBody
	}
	return nil
}

func (m *CMsg) GetFlowLogInfoBody() *CMsgBodyGsmFlowInfo {
	if m != nil {
		return m.GsmFlowLogInfoBody
	}
	return nil
}

func (m *CMsg) GetGsmSetupAckBody() *CMsgBodyGsmSetupAck {
	if m != nil {
		return m.GsmSetupAckBody
	}
	return nil
}

func (m *CMsg) GetUpgrade() *CMsgBodyUpgrade {
	if m != nil {
		return m.Upgrade
	}
	return nil
}

func (m *CMsg) GetInstallBatteryResult() *CMsgBodyInstallBatteryResult {
	if m != nil {
		return m.InstallBatteryResult
	}
	return nil
}

func (m *CMsg) GetGetBatteryPasswordBody() *CMsgBodyGetBatteryPassword {
	if m != nil {
		return m.GetBatteryPasswordBody
	}
	return nil
}

func (m *CMsg) GetGetBatteryPasswordAckBody() *CMsgBodyGetBatteryPasswordAck {
	if m != nil {
		return m.GetBatteryPasswordAckBody
	}
	return nil
}

func (m *CMsg) GetUpgradeAck() *CMsgBodyUpgradeAck {
	if m != nil {
		return m.UpgradeAck
	}
	return nil
}

func (m *CMsg) GetUpdateDeviceBody() *CMsgBodyDeviceUpdate {
	if m != nil {
		return m.UpdateDeviceBody
	}
	return nil
}

// 消息头
type CMsgHead struct {
	Cmd              *CMD    `protobuf:"varint,1,req,name=cmd,enum=templ.CMD" json:"cmd,omitempty"`
	Version          *string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Tranid           *string `protobuf:"bytes,3,opt,name=tranid" json:"tranid,omitempty"`
	Groupid          *int32  `protobuf:"varint,4,opt,name=groupid" json:"groupid,omitempty"`
	Errcode          *int32  `protobuf:"varint,5,opt,name=errcode" json:"errcode,omitempty"`
	HeartBeatFlag    *bool   `protobuf:"varint,6,opt,name=heart_beat_flag" json:"heart_beat_flag,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgHead) Reset()         { *m = CMsgHead{} }
func (m *CMsgHead) String() string { return proto.CompactTextString(m) }
func (*CMsgHead) ProtoMessage()    {}

func (m *CMsgHead) GetCmd() CMD {
	if m != nil && m.Cmd != nil {
		return *m.Cmd
	}
	return CMD_STATUSREQ
}

func (m *CMsgHead) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *CMsgHead) GetTranid() string {
	if m != nil && m.Tranid != nil {
		return *m.Tranid
	}
	return ""
}

func (m *CMsgHead) GetGroupid() int32 {
	if m != nil && m.Groupid != nil {
		return *m.Groupid
	}
	return 0
}

func (m *CMsgHead) GetErrcode() int32 {
	if m != nil && m.Errcode != nil {
		return *m.Errcode
	}
	return 0
}

func (m *CMsgHead) GetHeartBeatFlag() bool {
	if m != nil && m.HeartBeatFlag != nil {
		return *m.HeartBeatFlag
	}
	return false
}

type Slot struct {
	Num              *int32                `protobuf:"varint,1,req,name=num" json:"num,omitempty"`
	Status           *HEART_BEAT_SLOT_CODE `protobuf:"varint,2,req,name=status,enum=templ.HEART_BEAT_SLOT_CODE" json:"status,omitempty"`
	Batterysn        *string               `protobuf:"bytes,3,opt,name=batterysn" json:"batterysn,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *Slot) Reset()         { *m = Slot{} }
func (m *Slot) String() string { return proto.CompactTextString(m) }
func (*Slot) ProtoMessage()    {}

func (m *Slot) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *Slot) GetStatus() HEART_BEAT_SLOT_CODE {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return HEART_BEAT_SLOT_CODE_HBS_STATUS_OK
}

func (m *Slot) GetBatterysn() string {
	if m != nil && m.Batterysn != nil {
		return *m.Batterysn
	}
	return ""
}

// 2.2.电源
type Battery struct {
	Batterysn          *string                  `protobuf:"bytes,1,req,name=batterysn" json:"batterysn,omitempty"`
	Temprature         *float32                 `protobuf:"fixed32,2,req,name=temprature" json:"temprature,omitempty"`
	Voltage            *int32                   `protobuf:"varint,3,req,name=voltage" json:"voltage,omitempty"`
	FullChargeCapacity *int32                   `protobuf:"varint,4,req,name=fullChargeCapacity" json:"fullChargeCapacity,omitempty"`
	RemainingCapacity  *int32                   `protobuf:"varint,5,req,name=remainingCapacity" json:"remainingCapacity,omitempty"`
	AverageCurrent     *int32                   `protobuf:"varint,6,req,name=averageCurrent" json:"averageCurrent,omitempty"`
	CycleCount         *int32                   `protobuf:"varint,7,req,name=cycleCount" json:"cycleCount,omitempty"`
	BmsSafetyStatus    *int32                   `protobuf:"varint,8,req,name=bmsSafetyStatus" json:"bmsSafetyStatus,omitempty"`
	BmsFlags           *int32                   `protobuf:"varint,9,req,name=bmsFlags" json:"bmsFlags,omitempty"`
	Status             *HEART_BEAT_BATTERY_CODE `protobuf:"varint,10,req,name=status,enum=templ.HEART_BEAT_BATTERY_CODE" json:"status,omitempty"`
	EnableStatus       *ENABLE_BORROW_STATUS    `protobuf:"varint,11,req,name=enableStatus,enum=templ.ENABLE_BORROW_STATUS" json:"enableStatus,omitempty"`
	XXX_unrecognized   []byte                   `json:"-"`
}

func (m *Battery) Reset()         { *m = Battery{} }
func (m *Battery) String() string { return proto.CompactTextString(m) }
func (*Battery) ProtoMessage()    {}

func (m *Battery) GetBatterysn() string {
	if m != nil && m.Batterysn != nil {
		return *m.Batterysn
	}
	return ""
}

func (m *Battery) GetTemprature() float32 {
	if m != nil && m.Temprature != nil {
		return *m.Temprature
	}
	return 0
}

func (m *Battery) GetVoltage() int32 {
	if m != nil && m.Voltage != nil {
		return *m.Voltage
	}
	return 0
}

func (m *Battery) GetFullChargeCapacity() int32 {
	if m != nil && m.FullChargeCapacity != nil {
		return *m.FullChargeCapacity
	}
	return 0
}

func (m *Battery) GetRemainingCapacity() int32 {
	if m != nil && m.RemainingCapacity != nil {
		return *m.RemainingCapacity
	}
	return 0
}

func (m *Battery) GetAverageCurrent() int32 {
	if m != nil && m.AverageCurrent != nil {
		return *m.AverageCurrent
	}
	return 0
}

func (m *Battery) GetCycleCount() int32 {
	if m != nil && m.CycleCount != nil {
		return *m.CycleCount
	}
	return 0
}

func (m *Battery) GetBmsSafetyStatus() int32 {
	if m != nil && m.BmsSafetyStatus != nil {
		return *m.BmsSafetyStatus
	}
	return 0
}

func (m *Battery) GetBmsFlags() int32 {
	if m != nil && m.BmsFlags != nil {
		return *m.BmsFlags
	}
	return 0
}

func (m *Battery) GetStatus() HEART_BEAT_BATTERY_CODE {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return HEART_BEAT_BATTERY_CODE_HBB_STATUS_OK
}

func (m *Battery) GetEnableStatus() ENABLE_BORROW_STATUS {
	if m != nil && m.EnableStatus != nil {
		return *m.EnableStatus
	}
	return ENABLE_BORROW_STATUS_ENABLE_STATUS
}

// 2.3.柜机
type Device struct {
	Deviceid              *string                 `protobuf:"bytes,1,req,name=deviceid" json:"deviceid,omitempty"`
	ArmTemprature         *float32                `protobuf:"fixed32,2,opt,name=armTemprature" json:"armTemprature,omitempty"`
	EnvironmentTemprature *float32                `protobuf:"fixed32,3,opt,name=environmentTemprature" json:"environmentTemprature,omitempty"`
	SoftwareVersion       *string                 `protobuf:"bytes,4,opt,name=softwareVersion" json:"softwareVersion,omitempty"`
	IpAddr                *string                 `protobuf:"bytes,5,opt,name=ipAddr" json:"ipAddr,omitempty"`
	Status                *HEART_BEAT_DEVICE_CODE `protobuf:"varint,6,req,name=status,enum=templ.HEART_BEAT_DEVICE_CODE" json:"status,omitempty"`
	XXX_unrecognized      []byte                  `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}

func (m *Device) GetDeviceid() string {
	if m != nil && m.Deviceid != nil {
		return *m.Deviceid
	}
	return ""
}

func (m *Device) GetArmTemprature() float32 {
	if m != nil && m.ArmTemprature != nil {
		return *m.ArmTemprature
	}
	return 0
}

func (m *Device) GetEnvironmentTemprature() float32 {
	if m != nil && m.EnvironmentTemprature != nil {
		return *m.EnvironmentTemprature
	}
	return 0
}

func (m *Device) GetSoftwareVersion() string {
	if m != nil && m.SoftwareVersion != nil {
		return *m.SoftwareVersion
	}
	return ""
}

func (m *Device) GetIpAddr() string {
	if m != nil && m.IpAddr != nil {
		return *m.IpAddr
	}
	return ""
}

func (m *Device) GetStatus() HEART_BEAT_DEVICE_CODE {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return HEART_BEAT_DEVICE_CODE_HBD_STATUS_OK
}

// 柜机状态
type CMsgBodyDeviceStatus struct {
	Device           *Device    `protobuf:"bytes,1,req,name=device" json:"device,omitempty"`
	Battery          []*Battery `protobuf:"bytes,2,rep,name=battery" json:"battery,omitempty"`
	Slot             []*Slot    `protobuf:"bytes,3,rep,name=slot" json:"slot,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *CMsgBodyDeviceStatus) Reset()         { *m = CMsgBodyDeviceStatus{} }
func (m *CMsgBodyDeviceStatus) String() string { return proto.CompactTextString(m) }
func (*CMsgBodyDeviceStatus) ProtoMessage()    {}

func (m *CMsgBodyDeviceStatus) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *CMsgBodyDeviceStatus) GetBattery() []*Battery {
	if m != nil {
		return m.Battery
	}
	return nil
}

func (m *CMsgBodyDeviceStatus) GetSlot() []*Slot {
	if m != nil {
		return m.Slot
	}
	return nil
}

// 柜机动作
type CMsgBodyDeviceOpen struct {
	Action           *DEVACTION `protobuf:"varint,1,req,name=action,enum=templ.DEVACTION" json:"action,omitempty"`
	Num              *int32     `protobuf:"varint,2,req,name=num" json:"num,omitempty"`
	Password         *string    `protobuf:"bytes,3,req,name=password" json:"password,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *CMsgBodyDeviceOpen) Reset()         { *m = CMsgBodyDeviceOpen{} }
func (m *CMsgBodyDeviceOpen) String() string { return proto.CompactTextString(m) }
func (*CMsgBodyDeviceOpen) ProtoMessage()    {}

func (m *CMsgBodyDeviceOpen) GetAction() DEVACTION {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return DEVACTION_BORROW
}

func (m *CMsgBodyDeviceOpen) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *CMsgBodyDeviceOpen) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

// 电源取走或插入响应
type CMsgBodyDeviceAck struct {
	Action           *DEVACTION                  `protobuf:"varint,1,req,name=action,enum=templ.DEVACTION" json:"action,omitempty"`
	Deviceid         *string                     `protobuf:"bytes,2,req,name=deviceid" json:"deviceid,omitempty"`
	Num              *int32                      `protobuf:"varint,3,req,name=num" json:"num,omitempty"`
	Batterysn        *string                     `protobuf:"bytes,4,req,name=batterysn" json:"batterysn,omitempty"`
	State            *BATTERY_BORROW_RETURN_CODE `protobuf:"varint,5,req,name=state,enum=templ.BATTERY_BORROW_RETURN_CODE" json:"state,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *CMsgBodyDeviceAck) Reset()         { *m = CMsgBodyDeviceAck{} }
func (m *CMsgBodyDeviceAck) String() string { return proto.CompactTextString(m) }
func (*CMsgBodyDeviceAck) ProtoMessage()    {}

func (m *CMsgBodyDeviceAck) GetAction() DEVACTION {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return DEVACTION_BORROW
}

func (m *CMsgBodyDeviceAck) GetDeviceid() string {
	if m != nil && m.Deviceid != nil {
		return *m.Deviceid
	}
	return ""
}

func (m *CMsgBodyDeviceAck) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *CMsgBodyDeviceAck) GetBatterysn() string {
	if m != nil && m.Batterysn != nil {
		return *m.Batterysn
	}
	return ""
}

func (m *CMsgBodyDeviceAck) GetState() BATTERY_BORROW_RETURN_CODE {
	if m != nil && m.State != nil {
		return *m.State
	}
	return BATTERY_BORROW_RETURN_CODE_BBR_STATUS_OK
}

// 柜机升级软件
type CMsgBodyUpgrade struct {
	Version          *string `protobuf:"bytes,1,req,name=version" json:"version,omitempty"`
	ServerUrl        *string `protobuf:"bytes,2,req,name=serverUrl" json:"serverUrl,omitempty"`
	FileMd5Sum       *string `protobuf:"bytes,3,req,name=fileMd5sum" json:"fileMd5sum,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgBodyUpgrade) Reset()         { *m = CMsgBodyUpgrade{} }
func (m *CMsgBodyUpgrade) String() string { return proto.CompactTextString(m) }
func (*CMsgBodyUpgrade) ProtoMessage()    {}

func (m *CMsgBodyUpgrade) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

func (m *CMsgBodyUpgrade) GetServerUrl() string {
	if m != nil && m.ServerUrl != nil {
		return *m.ServerUrl
	}
	return ""
}

func (m *CMsgBodyUpgrade) GetFileMd5Sum() string {
	if m != nil && m.FileMd5Sum != nil {
		return *m.FileMd5Sum
	}
	return ""
}

// 柜机升级响应
type CMsgBodyUpgradeAck struct {
	UpgradeStatus    *UPGRADESTATUS `protobuf:"varint,1,req,name=upgradeStatus,enum=templ.UPGRADESTATUS" json:"upgradeStatus,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *CMsgBodyUpgradeAck) Reset()         { *m = CMsgBodyUpgradeAck{} }
func (m *CMsgBodyUpgradeAck) String() string { return proto.CompactTextString(m) }
func (*CMsgBodyUpgradeAck) ProtoMessage()    {}

func (m *CMsgBodyUpgradeAck) GetUpgradeStatus() UPGRADESTATUS {
	if m != nil && m.UpgradeStatus != nil {
		return *m.UpgradeStatus
	}
	return UPGRADESTATUS_DOWNLOAD_OK
}

// 服务器发送更新参数命令
type CMsgBodyDeviceUpdate struct {
	Cmd              *string `protobuf:"bytes,1,req,name=Cmd" json:"Cmd,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgBodyDeviceUpdate) Reset()         { *m = CMsgBodyDeviceUpdate{} }
func (m *CMsgBodyDeviceUpdate) String() string { return proto.CompactTextString(m) }
func (*CMsgBodyDeviceUpdate) ProtoMessage()    {}

func (m *CMsgBodyDeviceUpdate) GetCmd() string {
	if m != nil && m.Cmd != nil {
		return *m.Cmd
	}
	return ""
}

// 柜机设置wifi信息
type CMsgBodyWifiSetupInfo struct {
	Ssid               *string         `protobuf:"bytes,1,opt,name=ssid" json:"ssid,omitempty"`
	Password           *string         `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	ConnectNetworkType *CONNECTNETTYPE `protobuf:"varint,3,req,name=connectNetworkType,enum=templ.CONNECTNETTYPE" json:"connectNetworkType,omitempty"`
	WifiAuthMode       *WIFIAUTHMODE   `protobuf:"varint,4,opt,name=wifiAuthMode,enum=templ.WIFIAUTHMODE" json:"wifiAuthMode,omitempty"`
	WifiEncrypt        *WIFIENCRYPT    `protobuf:"varint,5,opt,name=WifiEncrypt,enum=templ.WIFIENCRYPT" json:"WifiEncrypt,omitempty"`
	Deviceid           *string         `protobuf:"bytes,6,req,name=deviceid" json:"deviceid,omitempty"`
	XXX_unrecognized   []byte          `json:"-"`
}

func (m *CMsgBodyWifiSetupInfo) Reset()         { *m = CMsgBodyWifiSetupInfo{} }
func (m *CMsgBodyWifiSetupInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgBodyWifiSetupInfo) ProtoMessage()    {}

func (m *CMsgBodyWifiSetupInfo) GetSsid() string {
	if m != nil && m.Ssid != nil {
		return *m.Ssid
	}
	return ""
}

func (m *CMsgBodyWifiSetupInfo) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *CMsgBodyWifiSetupInfo) GetConnectNetworkType() CONNECTNETTYPE {
	if m != nil && m.ConnectNetworkType != nil {
		return *m.ConnectNetworkType
	}
	return CONNECTNETTYPE_CONNECTNETWIFI
}

func (m *CMsgBodyWifiSetupInfo) GetWifiAuthMode() WIFIAUTHMODE {
	if m != nil && m.WifiAuthMode != nil {
		return *m.WifiAuthMode
	}
	return WIFIAUTHMODE_WIFIAUTHMODENONE
}

func (m *CMsgBodyWifiSetupInfo) GetWifiEncrypt() WIFIENCRYPT {
	if m != nil && m.WifiEncrypt != nil {
		return *m.WifiEncrypt
	}
	return WIFIENCRYPT_WIFIENCRYPTNONE
}

func (m *CMsgBodyWifiSetupInfo) GetDeviceid() string {
	if m != nil && m.Deviceid != nil {
		return *m.Deviceid
	}
	return ""
}

// 柜机设置wifi结果反馈
type CMsgBodyWifiSetupAck struct {
	ResCode          *RESCODE `protobuf:"varint,1,req,name=resCode,enum=templ.RESCODE" json:"resCode,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgBodyWifiSetupAck) Reset()         { *m = CMsgBodyWifiSetupAck{} }
func (m *CMsgBodyWifiSetupAck) String() string { return proto.CompactTextString(m) }
func (*CMsgBodyWifiSetupAck) ProtoMessage()    {}

func (m *CMsgBodyWifiSetupAck) GetResCode() RESCODE {
	if m != nil && m.ResCode != nil {
		return *m.ResCode
	}
	return RESCODE_RESCODEFAIL
}

// 柜机设置2G信息
type CMsgBodyGsmSetupInfo struct {
	ConnectNetworkType *CONNECTNETTYPE `protobuf:"varint,1,req,name=connectNetworkType,enum=templ.CONNECTNETTYPE" json:"connectNetworkType,omitempty"`
	Deviceid           *string         `protobuf:"bytes,2,req,name=deviceid" json:"deviceid,omitempty"`
	Imei               *string         `protobuf:"bytes,3,req,name=imei" json:"imei,omitempty"`
	Iccid              *string         `protobuf:"bytes,4,req,name=iccid" json:"iccid,omitempty"`
	Imsi               *string         `protobuf:"bytes,5,req,name=imsi" json:"imsi,omitempty"`
}

func (m *CMsgBodyGsmSetupInfo) Reset()         { *m = CMsgBodyGsmSetupInfo{} }
func (m *CMsgBodyGsmSetupInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgBodyGsmSetupInfo) ProtoMessage()    {}

func (m *CMsgBodyGsmSetupInfo) GetImei() string {
	if m != nil && m.Imei != nil {
		return *m.Imei
	}
	return ""
}

func (m *CMsgBodyGsmSetupInfo) GetIccid() string {
	if m != nil && m.Iccid != nil {
		return *m.Iccid
	}
	return ""
}

func (m *CMsgBodyGsmSetupInfo) GetImsi() string {
	if m != nil && m.Imsi != nil {
		return *m.Imsi
	}
	return ""
}

func (m *CMsgBodyGsmSetupInfo) GetDeviceid() string {
	if m != nil && m.Deviceid != nil {
		return *m.Deviceid
	}
	return ""
}

func (m *CMsgBodyGsmSetupInfo) GetConnectNetworkType() CONNECTNETTYPE {
	if m != nil && m.ConnectNetworkType != nil {
		return *m.ConnectNetworkType
	}
	return CONNECTNETTYPE_CONNECTNET2G
}

// 柜机设置2G结果反馈
type CMsgBodyGsmSetupAck struct {
	ResCode          *RESCODE `protobuf:"varint,1,req,name=resCode,enum=templ.RESCODE" json:"resCode,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgBodyGsmSetupAck) Reset()         { *m = CMsgBodyGsmSetupAck{} }
func (m *CMsgBodyGsmSetupAck) String() string { return proto.CompactTextString(m) }
func (*CMsgBodyGsmSetupAck) ProtoMessage()    {}

func (m *CMsgBodyGsmSetupAck) GetResCode() RESCODE {
	if m != nil && m.ResCode != nil {
		return *m.ResCode
	}
	return RESCODE_RESCODEFAIL
}

// 柜机上报2G流量信息
type CMsgBodyGsmFlowInfo struct {
	Deviceid     *string `protobuf:"bytes,1,req,name=deviceid" json:"deviceid,omitempty"`
	DevUnixTime  *int64  `protobuf:"varint,2,req,name=devUnixTime" json:"devUnixTime,omitempty"`
	GsmFlowBytes *int64  `protobuf:"varint,3,req,name=gsmFlowBytes" json:"gsmFlowBytes,omitempty"`
}

func (m *CMsgBodyGsmFlowInfo) Reset()         { *m = CMsgBodyGsmFlowInfo{} }
func (m *CMsgBodyGsmFlowInfo) String() string { return proto.CompactTextString(m) }
func (*CMsgBodyGsmFlowInfo) ProtoMessage()    {}

func (m *CMsgBodyGsmFlowInfo) GetDevUnixTime() int64 {
	if m != nil && m.DevUnixTime != nil {
		return *m.DevUnixTime
	}
	return -1
}

func (m *CMsgBodyGsmFlowInfo) GetGsmFlowBytes() int64 {
	if m != nil && m.GsmFlowBytes != nil {
		return *m.GsmFlowBytes
	}
	return -1
}

func (m *CMsgBodyGsmFlowInfo) GetDeviceid() string {
	if m != nil && m.Deviceid != nil {
		return *m.Deviceid
	}
	return ""
}

// 柜机上报2G流量结果反馈
type CMsgBodyGsmFlowAck struct {
	ResCode          *RESCODE `protobuf:"varint,1,req,name=resCode,enum=templ.RESCODE" json:"resCode,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgBodyGsmFlowAck) Reset()         { *m = CMsgBodyGsmFlowAck{} }
func (m *CMsgBodyGsmFlowAck) String() string { return proto.CompactTextString(m) }
func (*CMsgBodyGsmFlowAck) ProtoMessage()    {}

func (m *CMsgBodyGsmFlowAck) GetResCode() RESCODE {
	if m != nil && m.ResCode != nil {
		return *m.ResCode
	}
	return RESCODE_RESCODEFAIL
}

// 3.5.安装电源
type CMsgBodyInstallBatteryResult struct {
	DeviceId         *string                 `protobuf:"bytes,1,req,name=deviceId" json:"deviceId,omitempty"`
	SlotNum          *int32                  `protobuf:"varint,2,req,name=slotNum" json:"slotNum,omitempty"`
	ResCode          *InstallBatteryResCode  `protobuf:"varint,3,req,name=resCode,enum=templ.InstallBatteryResCode" json:"resCode,omitempty"`
	NextSlotNum      *int32                  `protobuf:"varint,4,req,name=nextSlotNum" json:"nextSlotNum,omitempty"`
	OpenCode         *InstallBatteryOpenCode `protobuf:"varint,5,req,name=openCode,enum=templ.InstallBatteryOpenCode" json:"openCode,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *CMsgBodyInstallBatteryResult) Reset()         { *m = CMsgBodyInstallBatteryResult{} }
func (m *CMsgBodyInstallBatteryResult) String() string { return proto.CompactTextString(m) }
func (*CMsgBodyInstallBatteryResult) ProtoMessage()    {}

func (m *CMsgBodyInstallBatteryResult) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *CMsgBodyInstallBatteryResult) GetSlotNum() int32 {
	if m != nil && m.SlotNum != nil {
		return *m.SlotNum
	}
	return 0
}

func (m *CMsgBodyInstallBatteryResult) GetResCode() InstallBatteryResCode {
	if m != nil && m.ResCode != nil {
		return *m.ResCode
	}
	return InstallBatteryResCode_RESCODEOK
}

func (m *CMsgBodyInstallBatteryResult) GetNextSlotNum() int32 {
	if m != nil && m.NextSlotNum != nil {
		return *m.NextSlotNum
	}
	return 0
}

func (m *CMsgBodyInstallBatteryResult) GetOpenCode() InstallBatteryOpenCode {
	if m != nil && m.OpenCode != nil {
		return *m.OpenCode
	}
	return InstallBatteryOpenCode_OPENCODEOK
}

type CMsgBodyGetBatteryPassword struct {
	DeviceId         *string `protobuf:"bytes,1,req,name=deviceId" json:"deviceId,omitempty"`
	BatterySn        *string `protobuf:"bytes,2,req,name=batterySn" json:"batterySn,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgBodyGetBatteryPassword) Reset()         { *m = CMsgBodyGetBatteryPassword{} }
func (m *CMsgBodyGetBatteryPassword) String() string { return proto.CompactTextString(m) }
func (*CMsgBodyGetBatteryPassword) ProtoMessage()    {}

func (m *CMsgBodyGetBatteryPassword) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *CMsgBodyGetBatteryPassword) GetBatterySn() string {
	if m != nil && m.BatterySn != nil {
		return *m.BatterySn
	}
	return ""
}

type CMsgBodyGetBatteryPasswordAck struct {
	ResCode          *int32  `protobuf:"varint,1,req,name=resCode" json:"resCode,omitempty"`
	DeviceId         *string `protobuf:"bytes,2,req,name=deviceId" json:"deviceId,omitempty"`
	BatterySn        *string `protobuf:"bytes,3,req,name=batterySn" json:"batterySn,omitempty"`
	BatteryPassword  *string `protobuf:"bytes,4,req,name=batteryPassword" json:"batteryPassword,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgBodyGetBatteryPasswordAck) Reset()         { *m = CMsgBodyGetBatteryPasswordAck{} }
func (m *CMsgBodyGetBatteryPasswordAck) String() string { return proto.CompactTextString(m) }
func (*CMsgBodyGetBatteryPasswordAck) ProtoMessage()    {}

func (m *CMsgBodyGetBatteryPasswordAck) GetResCode() int32 {
	if m != nil && m.ResCode != nil {
		return *m.ResCode
	}
	return 0
}

func (m *CMsgBodyGetBatteryPasswordAck) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *CMsgBodyGetBatteryPasswordAck) GetBatterySn() string {
	if m != nil && m.BatterySn != nil {
		return *m.BatterySn
	}
	return ""
}

func (m *CMsgBodyGetBatteryPasswordAck) GetBatteryPassword() string {
	if m != nil && m.BatteryPassword != nil {
		return *m.BatteryPassword
	}
	return ""
}

func init() {
	proto.RegisterEnum("templ.CMD", CMD_name, CMD_value)
	proto.RegisterEnum("templ.HEART_BEAT_DEVICE_CODE", HEART_BEAT_DEVICE_CODE_name, HEART_BEAT_DEVICE_CODE_value)
	proto.RegisterEnum("templ.HEART_BEAT_SLOT_CODE", HEART_BEAT_SLOT_CODE_name, HEART_BEAT_SLOT_CODE_value)
	proto.RegisterEnum("templ.HEART_BEAT_BATTERY_CODE", HEART_BEAT_BATTERY_CODE_name, HEART_BEAT_BATTERY_CODE_value)
	proto.RegisterEnum("templ.ENABLE_BORROW_STATUS", ENABLE_BORROW_STATUS_name, ENABLE_BORROW_STATUS_value)
	proto.RegisterEnum("templ.DEVACTION", DEVACTION_name, DEVACTION_value)
	proto.RegisterEnum("templ.BATTERY_BORROW_RETURN_CODE", BATTERY_BORROW_RETURN_CODE_name, BATTERY_BORROW_RETURN_CODE_value)
	proto.RegisterEnum("templ.UPGRADESTATUS", UPGRADESTATUS_name, UPGRADESTATUS_value)
	proto.RegisterEnum("templ.WIFIAUTHMODE", WIFIAUTHMODE_name, WIFIAUTHMODE_value)
	proto.RegisterEnum("templ.WIFIENCRYPT", WIFIENCRYPT_name, WIFIENCRYPT_value)
	proto.RegisterEnum("templ.CONNECTNETTYPE", CONNECTNETTYPE_name, CONNECTNETTYPE_value)
	proto.RegisterEnum("templ.RESCODE", RESCODE_name, RESCODE_value)
	proto.RegisterEnum("templ.InstallBatteryOpenCode", InstallBatteryOpenCode_name, InstallBatteryOpenCode_value)
	proto.RegisterEnum("templ.InstallBatteryResCode", InstallBatteryResCode_name, InstallBatteryResCode_value)
}
