// Code generated by protoc-gen-go.
// source: Light/T1012/T1012.proto
// DO NOT EDIT!

/*
Package T1012_message is a generated protocol buffer package.

It is generated from these files:
	Light/T1012/T1012.proto

It has these top-level messages:
	SyncAlarmRecordMessage
	DeviceMessage
	ServerMessage
*/
package t1012

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import Light_Event_message "oceanwing/eufy/protobuf.lib/light/lightevent"
import alarm_message "oceanwing/eufy/protobuf.lib/common/server/alarm"
import away_mode_message "oceanwing/eufy/protobuf.lib/common/server/awaymode"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CmdType int32

const (
	// 设备向服务器请求时间及闹钟信息
	CmdType_DEV_REQUSET_TIME_Alarm      CmdType = 0
	CmdType_SERVER_RESPONSE_TIME_Alarm  CmdType = 1
	CmdType_DEV_RESPONSE_TIME_Alarm_ACK CmdType = 2
	// 设备向服务器请求时间信息
	CmdType_DEV_REQUEST_TIME      CmdType = 3
	CmdType_SERVER_RESPONSE_TIME  CmdType = 4
	CmdType_DEV_RESPONSE_TIME_ACK CmdType = 5
	// 设备主动上报设备状态，空闲时每20S主动上报一次，有状态变化立即上报
	CmdType_DEV_REPORT_STATUS CmdType = 6
	// 远程设置设备的开关、亮度、色温等状态，支持服务器及APP两种控制
	CmdType_REMOTE_SET_LIGHTING_PARA CmdType = 7
	// 设置设备在掉电后重新上电时的状态，仅支持服务器更改
	CmdType_DEV_REQUEST_POWERUP_LIGHT_STATUS CmdType = 8
	CmdType_REMOTE_SET_POWERUP_LIGHT_STATUS  CmdType = 9
	CmdType_DEV_RESPONE_POWERUP_LIGHT_ACK    CmdType = 10
	// 设置离家模式状态
	CmdType_DEV_REQUEST_AWAYMODE_STATUS CmdType = 11
	CmdType_REMOTE_SET_AWAYMODE_STATUS  CmdType = 12
	CmdType_DEV_RESPONE_AWAYMODE_ACK    CmdType = 13
)

var CmdType_name = map[int32]string{
	0:  "DEV_REQUSET_TIME_Alarm",
	1:  "SERVER_RESPONSE_TIME_Alarm",
	2:  "DEV_RESPONSE_TIME_Alarm_ACK",
	3:  "DEV_REQUEST_TIME",
	4:  "SERVER_RESPONSE_TIME",
	5:  "DEV_RESPONSE_TIME_ACK",
	6:  "DEV_REPORT_STATUS",
	7:  "REMOTE_SET_LIGHTING_PARA",
	8:  "DEV_REQUEST_POWERUP_LIGHT_STATUS",
	9:  "REMOTE_SET_POWERUP_LIGHT_STATUS",
	10: "DEV_RESPONE_POWERUP_LIGHT_ACK",
	11: "DEV_REQUEST_AWAYMODE_STATUS",
	12: "REMOTE_SET_AWAYMODE_STATUS",
	13: "DEV_RESPONE_AWAYMODE_ACK",
}
var CmdType_value = map[string]int32{
	"DEV_REQUSET_TIME_Alarm":           0,
	"SERVER_RESPONSE_TIME_Alarm":       1,
	"DEV_RESPONSE_TIME_Alarm_ACK":      2,
	"DEV_REQUEST_TIME":                 3,
	"SERVER_RESPONSE_TIME":             4,
	"DEV_RESPONSE_TIME_ACK":            5,
	"DEV_REPORT_STATUS":                6,
	"REMOTE_SET_LIGHTING_PARA":         7,
	"DEV_REQUEST_POWERUP_LIGHT_STATUS": 8,
	"REMOTE_SET_POWERUP_LIGHT_STATUS":  9,
	"DEV_RESPONE_POWERUP_LIGHT_ACK":    10,
	"DEV_REQUEST_AWAYMODE_STATUS":      11,
	"REMOTE_SET_AWAYMODE_STATUS":       12,
	"DEV_RESPONE_AWAYMODE_ACK":         13,
}

func (x CmdType) Enum() *CmdType {
	p := new(CmdType)
	*p = x
	return p
}
func (x CmdType) String() string {
	return proto.EnumName(CmdType_name, int32(x))
}
func (x *CmdType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CmdType_value, data, "CmdType")
	if err != nil {
		return err
	}
	*x = CmdType(value)
	return nil
}
func (CmdType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type LIGHT_ONOFF_STATUS int32

const (
	LIGHT_ONOFF_STATUS_ON  LIGHT_ONOFF_STATUS = 1
	LIGHT_ONOFF_STATUS_OFF LIGHT_ONOFF_STATUS = 0
)

var LIGHT_ONOFF_STATUS_name = map[int32]string{
	1: "ON",
	0: "OFF",
}
var LIGHT_ONOFF_STATUS_value = map[string]int32{
	"ON":  1,
	"OFF": 0,
}

func (x LIGHT_ONOFF_STATUS) Enum() *LIGHT_ONOFF_STATUS {
	p := new(LIGHT_ONOFF_STATUS)
	*p = x
	return p
}
func (x LIGHT_ONOFF_STATUS) String() string {
	return proto.EnumName(LIGHT_ONOFF_STATUS_name, int32(x))
}
func (x *LIGHT_ONOFF_STATUS) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LIGHT_ONOFF_STATUS_value, data, "LIGHT_ONOFF_STATUS")
	if err != nil {
		return err
	}
	*x = LIGHT_ONOFF_STATUS(value)
	return nil
}
func (LIGHT_ONOFF_STATUS) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SyncAlarmRecordMessage_EventType int32

const (
	SyncAlarmRecordMessage_LIGHT_OFF     SyncAlarmRecordMessage_EventType = 0
	SyncAlarmRecordMessage_CUSTOMER_ON   SyncAlarmRecordMessage_EventType = 1
	SyncAlarmRecordMessage_DEFAULT_ON    SyncAlarmRecordMessage_EventType = 2
	SyncAlarmRecordMessage_REVERT_LASTON SyncAlarmRecordMessage_EventType = 3
)

var SyncAlarmRecordMessage_EventType_name = map[int32]string{
	0: "LIGHT_OFF",
	1: "CUSTOMER_ON",
	2: "DEFAULT_ON",
	3: "REVERT_LASTON",
}
var SyncAlarmRecordMessage_EventType_value = map[string]int32{
	"LIGHT_OFF":     0,
	"CUSTOMER_ON":   1,
	"DEFAULT_ON":    2,
	"REVERT_LASTON": 3,
}

func (x SyncAlarmRecordMessage_EventType) Enum() *SyncAlarmRecordMessage_EventType {
	p := new(SyncAlarmRecordMessage_EventType)
	*p = x
	return p
}
func (x SyncAlarmRecordMessage_EventType) String() string {
	return proto.EnumName(SyncAlarmRecordMessage_EventType_name, int32(x))
}
func (x *SyncAlarmRecordMessage_EventType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SyncAlarmRecordMessage_EventType_value, data, "SyncAlarmRecordMessage_EventType")
	if err != nil {
		return err
	}
	*x = SyncAlarmRecordMessage_EventType(value)
	return nil
}
func (SyncAlarmRecordMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

type DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE int32

const (
	DeviceMessage_ReportDevBaseInfo_NORMAL_MODE   DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE = 0
	DeviceMessage_ReportDevBaseInfo_AWAY_MODE     DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE = 1
	DeviceMessage_ReportDevBaseInfo_STREAMER_MODE DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE = 2
)

var DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE_name = map[int32]string{
	0: "NORMAL_MODE",
	1: "AWAY_MODE",
	2: "STREAMER_MODE",
}
var DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE_value = map[string]int32{
	"NORMAL_MODE":   0,
	"AWAY_MODE":     1,
	"STREAMER_MODE": 2,
}

func (x DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE) Enum() *DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE {
	p := new(DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE)
	*p = x
	return p
}
func (x DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE) String() string {
	return proto.EnumName(DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE_name, int32(x))
}
func (x *DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE_value, data, "DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE")
	if err != nil {
		return err
	}
	*x = DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE(value)
	return nil
}
func (DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0, 0}
}

type ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS int32

const (
	ServerMessage_SetPowerUpLightStatus_DEFAULT_SETTING       ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS = 0
	ServerMessage_SetPowerUpLightStatus_SAVE_CUSTOMER_SETTING ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS = 1
	ServerMessage_SetPowerUpLightStatus_LAST_ON_SETTING       ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS = 2
)

var ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS_name = map[int32]string{
	0: "DEFAULT_SETTING",
	1: "SAVE_CUSTOMER_SETTING",
	2: "LAST_ON_SETTING",
}
var ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS_value = map[string]int32{
	"DEFAULT_SETTING":       0,
	"SAVE_CUSTOMER_SETTING": 1,
	"LAST_ON_SETTING":       2,
}

func (x ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS) Enum() *ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS {
	p := new(ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS)
	*p = x
	return p
}
func (x ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS) String() string {
	return proto.EnumName(ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS_name, int32(x))
}
func (x *ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS_value, data, "ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS")
	if err != nil {
		return err
	}
	*x = ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS(value)
	return nil
}
func (ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 2, 0}
}

type SyncAlarmRecordMessage struct {
	AlarmRecordData  []*SyncAlarmRecordMessage_AlarmRecord `protobuf:"bytes,1,rep,name=AlarmRecordData" json:"AlarmRecordData,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *SyncAlarmRecordMessage) Reset()                    { *m = SyncAlarmRecordMessage{} }
func (m *SyncAlarmRecordMessage) String() string            { return proto.CompactTextString(m) }
func (*SyncAlarmRecordMessage) ProtoMessage()               {}
func (*SyncAlarmRecordMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SyncAlarmRecordMessage) GetAlarmRecordData() []*SyncAlarmRecordMessage_AlarmRecord {
	if m != nil {
		return m.AlarmRecordData
	}
	return nil
}

type SyncAlarmRecordMessage_AlarmEventMessage struct {
	Type             *SyncAlarmRecordMessage_EventType             `protobuf:"varint,1,req,name=type,enum=T1012.message.SyncAlarmRecordMessage_EventType" json:"type,omitempty"`
	LightCtl         *Light_Event_message.LampLightLevelCtlMessage `protobuf:"bytes,2,opt,name=lightCtl" json:"lightCtl,omitempty"`
	XXX_unrecognized []byte                                        `json:"-"`
}

func (m *SyncAlarmRecordMessage_AlarmEventMessage) Reset() {
	*m = SyncAlarmRecordMessage_AlarmEventMessage{}
}
func (m *SyncAlarmRecordMessage_AlarmEventMessage) String() string { return proto.CompactTextString(m) }
func (*SyncAlarmRecordMessage_AlarmEventMessage) ProtoMessage()    {}
func (*SyncAlarmRecordMessage_AlarmEventMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

func (m *SyncAlarmRecordMessage_AlarmEventMessage) GetType() SyncAlarmRecordMessage_EventType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SyncAlarmRecordMessage_LIGHT_OFF
}

func (m *SyncAlarmRecordMessage_AlarmEventMessage) GetLightCtl() *Light_Event_message.LampLightLevelCtlMessage {
	if m != nil {
		return m.LightCtl
	}
	return nil
}

type SyncAlarmRecordMessage_AlarmRecord struct {
	AlarmMesage      *alarm_message.Alarm                      `protobuf:"bytes,1,req,name=AlarmMesage" json:"AlarmMesage,omitempty"`
	AlarmEvent       *SyncAlarmRecordMessage_AlarmEventMessage `protobuf:"bytes,2,req,name=alarm_event,json=alarmEvent" json:"alarm_event,omitempty"`
	XXX_unrecognized []byte                                    `json:"-"`
}

func (m *SyncAlarmRecordMessage_AlarmRecord) Reset()         { *m = SyncAlarmRecordMessage_AlarmRecord{} }
func (m *SyncAlarmRecordMessage_AlarmRecord) String() string { return proto.CompactTextString(m) }
func (*SyncAlarmRecordMessage_AlarmRecord) ProtoMessage()    {}
func (*SyncAlarmRecordMessage_AlarmRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 1}
}

func (m *SyncAlarmRecordMessage_AlarmRecord) GetAlarmMesage() *alarm_message.Alarm {
	if m != nil {
		return m.AlarmMesage
	}
	return nil
}

func (m *SyncAlarmRecordMessage_AlarmRecord) GetAlarmEvent() *SyncAlarmRecordMessage_AlarmEventMessage {
	if m != nil {
		return m.AlarmEvent
	}
	return nil
}

type DeviceMessage struct {
	SessionId *int32 `protobuf:"varint,1,req,name=sessionId" json:"sessionId,omitempty"`
	// Types that are valid to be assigned to DevMessage:
	//	*DeviceMessage_ReportDevBaseInfo_
	//	*DeviceMessage_NonParaMsg
	DevMessage       isDeviceMessage_DevMessage `protobuf_oneof:"devMessage"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *DeviceMessage) Reset()                    { *m = DeviceMessage{} }
func (m *DeviceMessage) String() string            { return proto.CompactTextString(m) }
func (*DeviceMessage) ProtoMessage()               {}
func (*DeviceMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isDeviceMessage_DevMessage interface {
	isDeviceMessage_DevMessage()
}

type DeviceMessage_ReportDevBaseInfo_ struct {
	ReportDevBaseInfo *DeviceMessage_ReportDevBaseInfo `protobuf:"bytes,2,opt,name=report_devBaseInfo,json=reportDevBaseInfo,oneof"`
}
type DeviceMessage_NonParaMsg struct {
	NonParaMsg *DeviceMessage_Non_ParamMsg `protobuf:"bytes,3,opt,name=NonParaMsg,oneof"`
}

func (*DeviceMessage_ReportDevBaseInfo_) isDeviceMessage_DevMessage() {}
func (*DeviceMessage_NonParaMsg) isDeviceMessage_DevMessage()         {}

func (m *DeviceMessage) GetDevMessage() isDeviceMessage_DevMessage {
	if m != nil {
		return m.DevMessage
	}
	return nil
}

func (m *DeviceMessage) GetSessionId() int32 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *DeviceMessage) GetReportDevBaseInfo() *DeviceMessage_ReportDevBaseInfo {
	if x, ok := m.GetDevMessage().(*DeviceMessage_ReportDevBaseInfo_); ok {
		return x.ReportDevBaseInfo
	}
	return nil
}

func (m *DeviceMessage) GetNonParaMsg() *DeviceMessage_Non_ParamMsg {
	if x, ok := m.GetDevMessage().(*DeviceMessage_NonParaMsg); ok {
		return x.NonParaMsg
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DeviceMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DeviceMessage_OneofMarshaler, _DeviceMessage_OneofUnmarshaler, _DeviceMessage_OneofSizer, []interface{}{
		(*DeviceMessage_ReportDevBaseInfo_)(nil),
		(*DeviceMessage_NonParaMsg)(nil),
	}
}

func _DeviceMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DeviceMessage)
	// devMessage
	switch x := m.DevMessage.(type) {
	case *DeviceMessage_ReportDevBaseInfo_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReportDevBaseInfo); err != nil {
			return err
		}
	case *DeviceMessage_NonParaMsg:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NonParaMsg); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DeviceMessage.DevMessage has unexpected type %T", x)
	}
	return nil
}

func _DeviceMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DeviceMessage)
	switch tag {
	case 2: // devMessage.report_devBaseInfo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeviceMessage_ReportDevBaseInfo)
		err := b.DecodeMessage(msg)
		m.DevMessage = &DeviceMessage_ReportDevBaseInfo_{msg}
		return true, err
	case 3: // devMessage.NonParaMsg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeviceMessage_Non_ParamMsg)
		err := b.DecodeMessage(msg)
		m.DevMessage = &DeviceMessage_NonParaMsg{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DeviceMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DeviceMessage)
	// devMessage
	switch x := m.DevMessage.(type) {
	case *DeviceMessage_ReportDevBaseInfo_:
		s := proto.Size(x.ReportDevBaseInfo)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DeviceMessage_NonParaMsg:
		s := proto.Size(x.NonParaMsg)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DeviceMessage_ReportDevBaseInfo struct {
	Type             *CmdType                                        `protobuf:"varint,1,req,name=type,enum=T1012.message.CmdType" json:"type,omitempty"`
	LightCtl         *Light_Event_message.LampLightLevelCtlMessage   `protobuf:"bytes,2,req,name=lightCtl" json:"lightCtl,omitempty"`
	OnoffStatus      *LIGHT_ONOFF_STATUS                             `protobuf:"varint,3,req,name=onoff_status,json=onoffStatus,enum=T1012.message.LIGHT_ONOFF_STATUS" json:"onoff_status,omitempty"`
	Mode             *DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE `protobuf:"varint,4,req,name=mode,enum=T1012.message.DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE" json:"mode,omitempty"`
	LastOnLightCtl   *Light_Event_message.LampLightLevelCtlMessage   `protobuf:"bytes,5,opt,name=LastOn_lightCtl,json=LastOnLightCtl" json:"LastOn_lightCtl,omitempty"`
	XXX_unrecognized []byte                                          `json:"-"`
}

func (m *DeviceMessage_ReportDevBaseInfo) Reset()         { *m = DeviceMessage_ReportDevBaseInfo{} }
func (m *DeviceMessage_ReportDevBaseInfo) String() string { return proto.CompactTextString(m) }
func (*DeviceMessage_ReportDevBaseInfo) ProtoMessage()    {}
func (*DeviceMessage_ReportDevBaseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

func (m *DeviceMessage_ReportDevBaseInfo) GetType() CmdType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CmdType_DEV_REQUSET_TIME_Alarm
}

func (m *DeviceMessage_ReportDevBaseInfo) GetLightCtl() *Light_Event_message.LampLightLevelCtlMessage {
	if m != nil {
		return m.LightCtl
	}
	return nil
}

func (m *DeviceMessage_ReportDevBaseInfo) GetOnoffStatus() LIGHT_ONOFF_STATUS {
	if m != nil && m.OnoffStatus != nil {
		return *m.OnoffStatus
	}
	return LIGHT_ONOFF_STATUS_ON
}

func (m *DeviceMessage_ReportDevBaseInfo) GetMode() DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return DeviceMessage_ReportDevBaseInfo_NORMAL_MODE
}

func (m *DeviceMessage_ReportDevBaseInfo) GetLastOnLightCtl() *Light_Event_message.LampLightLevelCtlMessage {
	if m != nil {
		return m.LastOnLightCtl
	}
	return nil
}

type DeviceMessage_Non_ParamMsg struct {
	Type             *CmdType `protobuf:"varint,1,req,name=type,enum=T1012.message.CmdType" json:"type,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *DeviceMessage_Non_ParamMsg) Reset()                    { *m = DeviceMessage_Non_ParamMsg{} }
func (m *DeviceMessage_Non_ParamMsg) String() string            { return proto.CompactTextString(m) }
func (*DeviceMessage_Non_ParamMsg) ProtoMessage()               {}
func (*DeviceMessage_Non_ParamMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *DeviceMessage_Non_ParamMsg) GetType() CmdType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CmdType_DEV_REQUSET_TIME_Alarm
}

type ServerMessage struct {
	SessionId *int32 `protobuf:"varint,1,req,name=sessionId" json:"sessionId,omitempty"`
	// Types that are valid to be assigned to RemoteMessage:
	//	*ServerMessage_Sync_Time_Alarm_
	//	*ServerMessage_SetLightData_
	//	*ServerMessage_SetPowerupLightStatus
	//	*ServerMessage_SetAwayMode_Status
	RemoteMessage    isServerMessage_RemoteMessage `protobuf_oneof:"RemoteMessage"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *ServerMessage) Reset()                    { *m = ServerMessage{} }
func (m *ServerMessage) String() string            { return proto.CompactTextString(m) }
func (*ServerMessage) ProtoMessage()               {}
func (*ServerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isServerMessage_RemoteMessage interface {
	isServerMessage_RemoteMessage()
}

type ServerMessage_Sync_Time_Alarm_ struct {
	Sync_Time_Alarm *ServerMessage_Sync_Time_Alarm `protobuf:"bytes,2,opt,name=sync_Time_Alarm,json=syncTimeAlarm,oneof"`
}
type ServerMessage_SetLightData_ struct {
	SetLightData *ServerMessage_SetLightData `protobuf:"bytes,3,opt,name=setLight_data,json=setLightData,oneof"`
}
type ServerMessage_SetPowerupLightStatus struct {
	SetPowerupLightStatus *ServerMessage_SetPowerUpLightStatus `protobuf:"bytes,4,opt,name=setPowerup_light_status,json=setPowerupLightStatus,oneof"`
}
type ServerMessage_SetAwayMode_Status struct {
	SetAwayMode_Status *ServerMessage_SetAwayMode `protobuf:"bytes,5,opt,name=setAwayMode_Status,json=setAwayModeStatus,oneof"`
}

func (*ServerMessage_Sync_Time_Alarm_) isServerMessage_RemoteMessage()      {}
func (*ServerMessage_SetLightData_) isServerMessage_RemoteMessage()         {}
func (*ServerMessage_SetPowerupLightStatus) isServerMessage_RemoteMessage() {}
func (*ServerMessage_SetAwayMode_Status) isServerMessage_RemoteMessage()    {}

func (m *ServerMessage) GetRemoteMessage() isServerMessage_RemoteMessage {
	if m != nil {
		return m.RemoteMessage
	}
	return nil
}

func (m *ServerMessage) GetSessionId() int32 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *ServerMessage) GetSync_Time_Alarm() *ServerMessage_Sync_Time_Alarm {
	if x, ok := m.GetRemoteMessage().(*ServerMessage_Sync_Time_Alarm_); ok {
		return x.Sync_Time_Alarm
	}
	return nil
}

func (m *ServerMessage) GetSetLightData() *ServerMessage_SetLightData {
	if x, ok := m.GetRemoteMessage().(*ServerMessage_SetLightData_); ok {
		return x.SetLightData
	}
	return nil
}

func (m *ServerMessage) GetSetPowerupLightStatus() *ServerMessage_SetPowerUpLightStatus {
	if x, ok := m.GetRemoteMessage().(*ServerMessage_SetPowerupLightStatus); ok {
		return x.SetPowerupLightStatus
	}
	return nil
}

func (m *ServerMessage) GetSetAwayMode_Status() *ServerMessage_SetAwayMode {
	if x, ok := m.GetRemoteMessage().(*ServerMessage_SetAwayMode_Status); ok {
		return x.SetAwayMode_Status
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ServerMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ServerMessage_OneofMarshaler, _ServerMessage_OneofUnmarshaler, _ServerMessage_OneofSizer, []interface{}{
		(*ServerMessage_Sync_Time_Alarm_)(nil),
		(*ServerMessage_SetLightData_)(nil),
		(*ServerMessage_SetPowerupLightStatus)(nil),
		(*ServerMessage_SetAwayMode_Status)(nil),
	}
}

func _ServerMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ServerMessage)
	// RemoteMessage
	switch x := m.RemoteMessage.(type) {
	case *ServerMessage_Sync_Time_Alarm_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sync_Time_Alarm); err != nil {
			return err
		}
	case *ServerMessage_SetLightData_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetLightData); err != nil {
			return err
		}
	case *ServerMessage_SetPowerupLightStatus:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetPowerupLightStatus); err != nil {
			return err
		}
	case *ServerMessage_SetAwayMode_Status:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetAwayMode_Status); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ServerMessage.RemoteMessage has unexpected type %T", x)
	}
	return nil
}

func _ServerMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ServerMessage)
	switch tag {
	case 2: // RemoteMessage.sync_Time_Alarm
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServerMessage_Sync_Time_Alarm)
		err := b.DecodeMessage(msg)
		m.RemoteMessage = &ServerMessage_Sync_Time_Alarm_{msg}
		return true, err
	case 3: // RemoteMessage.setLight_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServerMessage_SetLightData)
		err := b.DecodeMessage(msg)
		m.RemoteMessage = &ServerMessage_SetLightData_{msg}
		return true, err
	case 4: // RemoteMessage.setPowerup_light_status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServerMessage_SetPowerUpLightStatus)
		err := b.DecodeMessage(msg)
		m.RemoteMessage = &ServerMessage_SetPowerupLightStatus{msg}
		return true, err
	case 5: // RemoteMessage.setAwayMode_Status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServerMessage_SetAwayMode)
		err := b.DecodeMessage(msg)
		m.RemoteMessage = &ServerMessage_SetAwayMode_Status{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ServerMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ServerMessage)
	// RemoteMessage
	switch x := m.RemoteMessage.(type) {
	case *ServerMessage_Sync_Time_Alarm_:
		s := proto.Size(x.Sync_Time_Alarm)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerMessage_SetLightData_:
		s := proto.Size(x.SetLightData)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerMessage_SetPowerupLightStatus:
		s := proto.Size(x.SetPowerupLightStatus)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerMessage_SetAwayMode_Status:
		s := proto.Size(x.SetAwayMode_Status)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ServerMessage_Sync_Time_Alarm struct {
	Type             *CmdType                `protobuf:"varint,1,req,name=type,enum=T1012.message.CmdType" json:"type,omitempty"`
	Time             *alarm_message.SyncTime `protobuf:"bytes,2,req,name=time" json:"time,omitempty"`
	Alarm            *SyncAlarmRecordMessage `protobuf:"bytes,3,req,name=Alarm" json:"Alarm,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *ServerMessage_Sync_Time_Alarm) Reset()         { *m = ServerMessage_Sync_Time_Alarm{} }
func (m *ServerMessage_Sync_Time_Alarm) String() string { return proto.CompactTextString(m) }
func (*ServerMessage_Sync_Time_Alarm) ProtoMessage()    {}
func (*ServerMessage_Sync_Time_Alarm) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 0}
}

func (m *ServerMessage_Sync_Time_Alarm) GetType() CmdType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CmdType_DEV_REQUSET_TIME_Alarm
}

func (m *ServerMessage_Sync_Time_Alarm) GetTime() *alarm_message.SyncTime {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ServerMessage_Sync_Time_Alarm) GetAlarm() *SyncAlarmRecordMessage {
	if m != nil {
		return m.Alarm
	}
	return nil
}

type ServerMessage_SetLightData struct {
	Type             *CmdType                                      `protobuf:"varint,1,req,name=type,enum=T1012.message.CmdType" json:"type,omitempty"`
	LightCtl         *Light_Event_message.LampLightLevelCtlMessage `protobuf:"bytes,2,opt,name=lightCtl" json:"lightCtl,omitempty"`
	OnoffStatus      *LIGHT_ONOFF_STATUS                           `protobuf:"varint,3,opt,name=onoff_status,json=onoffStatus,enum=T1012.message.LIGHT_ONOFF_STATUS" json:"onoff_status,omitempty"`
	XXX_unrecognized []byte                                        `json:"-"`
}

func (m *ServerMessage_SetLightData) Reset()                    { *m = ServerMessage_SetLightData{} }
func (m *ServerMessage_SetLightData) String() string            { return proto.CompactTextString(m) }
func (*ServerMessage_SetLightData) ProtoMessage()               {}
func (*ServerMessage_SetLightData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

func (m *ServerMessage_SetLightData) GetType() CmdType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CmdType_DEV_REQUSET_TIME_Alarm
}

func (m *ServerMessage_SetLightData) GetLightCtl() *Light_Event_message.LampLightLevelCtlMessage {
	if m != nil {
		return m.LightCtl
	}
	return nil
}

func (m *ServerMessage_SetLightData) GetOnoffStatus() LIGHT_ONOFF_STATUS {
	if m != nil && m.OnoffStatus != nil {
		return *m.OnoffStatus
	}
	return LIGHT_ONOFF_STATUS_ON
}

type ServerMessage_SetPowerUpLightStatus struct {
	Type             *CmdType                                                  `protobuf:"varint,1,req,name=type,enum=T1012.message.CmdType" json:"type,omitempty"`
	PowrupStatus     *ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS `protobuf:"varint,2,opt,name=powrup_status,json=powrupStatus,enum=T1012.message.ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS" json:"powrup_status,omitempty"`
	LightCtl         *Light_Event_message.LampLightLevelCtlMessage             `protobuf:"bytes,3,opt,name=lightCtl" json:"lightCtl,omitempty"`
	XXX_unrecognized []byte                                                    `json:"-"`
}

func (m *ServerMessage_SetPowerUpLightStatus) Reset()         { *m = ServerMessage_SetPowerUpLightStatus{} }
func (m *ServerMessage_SetPowerUpLightStatus) String() string { return proto.CompactTextString(m) }
func (*ServerMessage_SetPowerUpLightStatus) ProtoMessage()    {}
func (*ServerMessage_SetPowerUpLightStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 2}
}

func (m *ServerMessage_SetPowerUpLightStatus) GetType() CmdType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CmdType_DEV_REQUSET_TIME_Alarm
}

func (m *ServerMessage_SetPowerUpLightStatus) GetPowrupStatus() ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS {
	if m != nil && m.PowrupStatus != nil {
		return *m.PowrupStatus
	}
	return ServerMessage_SetPowerUpLightStatus_DEFAULT_SETTING
}

func (m *ServerMessage_SetPowerUpLightStatus) GetLightCtl() *Light_Event_message.LampLightLevelCtlMessage {
	if m != nil {
		return m.LightCtl
	}
	return nil
}

type ServerMessage_SetAwayMode struct {
	Type             *CmdType                            `protobuf:"varint,1,req,name=type,enum=T1012.message.CmdType" json:"type,omitempty"`
	SyncLeaveModeMsg *away_mode_message.LeaveHomeMessage `protobuf:"bytes,2,req,name=syncLeaveModeMsg" json:"syncLeaveModeMsg,omitempty"`
	XXX_unrecognized []byte                              `json:"-"`
}

func (m *ServerMessage_SetAwayMode) Reset()                    { *m = ServerMessage_SetAwayMode{} }
func (m *ServerMessage_SetAwayMode) String() string            { return proto.CompactTextString(m) }
func (*ServerMessage_SetAwayMode) ProtoMessage()               {}
func (*ServerMessage_SetAwayMode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 3} }

func (m *ServerMessage_SetAwayMode) GetType() CmdType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CmdType_DEV_REQUSET_TIME_Alarm
}

func (m *ServerMessage_SetAwayMode) GetSyncLeaveModeMsg() *away_mode_message.LeaveHomeMessage {
	if m != nil {
		return m.SyncLeaveModeMsg
	}
	return nil
}

func init() {
	proto.RegisterType((*SyncAlarmRecordMessage)(nil), "T1012.message.SyncAlarmRecordMessage")
	proto.RegisterType((*SyncAlarmRecordMessage_AlarmEventMessage)(nil), "T1012.message.SyncAlarmRecordMessage.AlarmEventMessage")
	proto.RegisterType((*SyncAlarmRecordMessage_AlarmRecord)(nil), "T1012.message.SyncAlarmRecordMessage.AlarmRecord")
	proto.RegisterType((*DeviceMessage)(nil), "T1012.message.DeviceMessage")
	proto.RegisterType((*DeviceMessage_ReportDevBaseInfo)(nil), "T1012.message.DeviceMessage.ReportDevBaseInfo")
	proto.RegisterType((*DeviceMessage_Non_ParamMsg)(nil), "T1012.message.DeviceMessage.Non_ParamMsg")
	proto.RegisterType((*ServerMessage)(nil), "T1012.message.ServerMessage")
	proto.RegisterType((*ServerMessage_Sync_Time_Alarm)(nil), "T1012.message.ServerMessage.Sync_Time_Alarm")
	proto.RegisterType((*ServerMessage_SetLightData)(nil), "T1012.message.ServerMessage.SetLightData")
	proto.RegisterType((*ServerMessage_SetPowerUpLightStatus)(nil), "T1012.message.ServerMessage.SetPowerUpLightStatus")
	proto.RegisterType((*ServerMessage_SetAwayMode)(nil), "T1012.message.ServerMessage.SetAwayMode")
	proto.RegisterEnum("T1012.message.CmdType", CmdType_name, CmdType_value)
	proto.RegisterEnum("T1012.message.LIGHT_ONOFF_STATUS", LIGHT_ONOFF_STATUS_name, LIGHT_ONOFF_STATUS_value)
	proto.RegisterEnum("T1012.message.SyncAlarmRecordMessage_EventType", SyncAlarmRecordMessage_EventType_name, SyncAlarmRecordMessage_EventType_value)
	proto.RegisterEnum("T1012.message.DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE", DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE_name, DeviceMessage_ReportDevBaseInfo_LIGHT_DEV_MODE_value)
	proto.RegisterEnum("T1012.message.ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS", ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS_name, ServerMessage_SetPowerUpLightStatus_POWERUP_LIGHT_STATUS_value)
}

func init() { proto.RegisterFile("Light/T1012/T1012.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1140 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x6e, 0xe2, 0xc6,
	0x17, 0xc7, 0x86, 0x6c, 0x36, 0x07, 0x08, 0xce, 0xfc, 0xf3, 0xc1, 0xdf, 0xdd, 0x36, 0x59, 0xd2,
	0x55, 0xd3, 0xb4, 0x25, 0x0d, 0x17, 0xad, 0xd4, 0xaa, 0x17, 0x0e, 0x4c, 0x02, 0x0a, 0x60, 0x76,
	0x6c, 0xd8, 0xae, 0xf6, 0x62, 0x64, 0x85, 0x49, 0x1a, 0x09, 0x63, 0x84, 0xbd, 0x44, 0xbc, 0x42,
	0xa5, 0xde, 0xf4, 0x05, 0x7a, 0xd1, 0x8b, 0x3e, 0x40, 0x5f, 0xa0, 0xf7, 0x7d, 0x82, 0xbe, 0x41,
	0x1f, 0xa3, 0x9a, 0x19, 0x1b, 0x8c, 0x43, 0xbb, 0xa1, 0xe9, 0x0d, 0x62, 0xce, 0x9c, 0xdf, 0xef,
	0x7c, 0x9f, 0x31, 0xec, 0x35, 0x6f, 0x6f, 0xbe, 0x0b, 0x4e, 0xec, 0xd3, 0xcf, 0x4f, 0x2b, 0xf2,
	0xb7, 0x3c, 0x1a, 0x7b, 0x81, 0x87, 0xf2, 0xf2, 0xe0, 0x32, 0xdf, 0x77, 0x6e, 0x98, 0x7e, 0x28,
	0xf5, 0xc4, 0x2f, 0xc5, 0x13, 0x36, 0x5c, 0xf8, 0x2f, 0x31, 0xfa, 0xfe, 0x95, 0xe7, 0xba, 0xde,
	0xf0, 0xc4, 0x67, 0xe3, 0x09, 0x1b, 0x9f, 0x38, 0x03, 0x67, 0xec, 0xca, 0xdf, 0x50, 0xe1, 0xa3,
	0x84, 0xc2, 0x9d, 0x33, 0xa5, 0xae, 0xd7, 0x67, 0xf3, 0x7f, 0x52, 0xb1, 0xf4, 0x43, 0x06, 0x76,
	0xad, 0xe9, 0xf0, 0xca, 0xe0, 0x60, 0xc2, 0xae, 0xbc, 0x71, 0xbf, 0x25, 0x3d, 0x41, 0x6f, 0xa0,
	0x10, 0x93, 0xd6, 0x9c, 0xc0, 0x29, 0x2a, 0x07, 0xe9, 0xa3, 0x6c, 0xe5, 0xb4, 0xbc, 0xe0, 0x72,
	0x79, 0x39, 0xbe, 0x1c, 0x13, 0x91, 0x24, 0x93, 0xfe, 0xb3, 0x02, 0x5b, 0x42, 0x26, 0xc2, 0x8a,
	0x4c, 0x56, 0x21, 0x13, 0x4c, 0x47, 0xac, 0xa8, 0x1c, 0xa8, 0x47, 0x9b, 0x95, 0x93, 0x87, 0xd9,
	0x11, 0x0c, 0xf6, 0x74, 0xc4, 0x88, 0x00, 0xa3, 0x06, 0x3c, 0x1d, 0xf0, 0x8c, 0x55, 0x83, 0x41,
	0x51, 0x3d, 0x50, 0x8e, 0xb2, 0x95, 0xcf, 0xca, 0xf1, 0x14, 0x46, 0x74, 0x4d, 0xc7, 0x1d, 0x09,
	0x79, 0x93, 0x4d, 0xd8, 0xa0, 0x1a, 0x0c, 0x42, 0x42, 0x32, 0x83, 0xeb, 0x3f, 0x29, 0x90, 0x8d,
	0x59, 0x44, 0x5f, 0x84, 0xc7, 0x16, 0xe3, 0x8a, 0xc2, 0xcd, 0x6c, 0x65, 0xbb, 0x2c, 0x33, 0xef,
	0x2e, 0xc4, 0x1d, 0x57, 0x44, 0xdf, 0x42, 0x56, 0xe8, 0x50, 0xc6, 0x3d, 0x28, 0xaa, 0x02, 0xf7,
	0xe5, 0x0a, 0x69, 0x8c, 0x67, 0x89, 0x80, 0x33, 0x13, 0x95, 0xda, 0xb0, 0x31, 0x8b, 0x1f, 0xe5,
	0x61, 0xa3, 0xd9, 0xb8, 0xa8, 0xdb, 0xd4, 0x3c, 0x3f, 0xd7, 0x52, 0xa8, 0x00, 0xd9, 0x6a, 0xd7,
	0xb2, 0xcd, 0x16, 0x26, 0xd4, 0x6c, 0x6b, 0x0a, 0xda, 0x04, 0xa8, 0xe1, 0x73, 0xa3, 0xdb, 0xb4,
	0xf9, 0x59, 0x45, 0x5b, 0x90, 0x27, 0xb8, 0x87, 0x89, 0x4d, 0x9b, 0x86, 0x65, 0x9b, 0x6d, 0x2d,
	0x5d, 0xfa, 0x73, 0x0d, 0xf2, 0x35, 0x36, 0xb9, 0xbd, 0x62, 0x51, 0x4d, 0x9e, 0xc1, 0x86, 0xcf,
	0x7c, 0xff, 0xd6, 0x1b, 0x36, 0xfa, 0x22, 0xe2, 0x35, 0x32, 0x17, 0x20, 0x0a, 0x68, 0xcc, 0x46,
	0xde, 0x38, 0xa0, 0x7d, 0x36, 0x39, 0x73, 0x7c, 0xd6, 0x18, 0x5e, 0x7b, 0x61, 0xda, 0xcb, 0x89,
	0x00, 0x17, 0x78, 0xcb, 0x44, 0xc0, 0x6a, 0x73, 0x54, 0x3d, 0x45, 0xb6, 0xc6, 0x49, 0x21, 0xba,
	0x04, 0x68, 0x7b, 0xc3, 0x8e, 0x33, 0x76, 0x5a, 0xfe, 0x4d, 0x31, 0x2d, 0x88, 0x3f, 0xfe, 0x47,
	0xe2, 0xb6, 0x37, 0xa4, 0x5c, 0xdf, 0x6d, 0xf9, 0x37, 0xf5, 0x14, 0x89, 0xc1, 0xf5, 0xdf, 0xd2,
	0xb0, 0x75, 0xcf, 0x2e, 0x3a, 0x5e, 0xe8, 0xba, 0xdd, 0x04, 0x79, 0xd5, 0xed, 0xff, 0x6d, 0x73,
	0xa9, 0x8f, 0x68, 0x2e, 0x54, 0x83, 0x9c, 0x37, 0xf4, 0xae, 0xaf, 0xa9, 0x1f, 0x38, 0xc1, 0x5b,
	0xbf, 0x98, 0x16, 0xe6, 0x9f, 0x27, 0xcc, 0x87, 0x05, 0x6d, 0x9b, 0xe7, 0xe7, 0xd4, 0xb2, 0x0d,
	0xbb, 0x6b, 0x91, 0xac, 0x80, 0x59, 0x02, 0x85, 0x5e, 0x42, 0x86, 0x8f, 0x73, 0x31, 0x23, 0xd0,
	0xdf, 0xac, 0x96, 0xf2, 0x90, 0xbd, 0x86, 0x7b, 0xb4, 0x65, 0xd6, 0x30, 0x11, 0x54, 0xa8, 0x07,
	0x85, 0xa6, 0xe3, 0x07, 0xe6, 0x90, 0xce, 0x42, 0x5d, 0xfb, 0x37, 0x73, 0xb4, 0x29, 0x59, 0x9a,
	0x21, 0x49, 0xa9, 0x0a, 0x9b, 0x8b, 0xf6, 0x78, 0x87, 0xb6, 0x4d, 0xd2, 0x32, 0x9a, 0xe2, 0xa8,
	0xa5, 0x78, 0x07, 0x1b, 0xaf, 0x8c, 0xd7, 0xf2, 0xa8, 0xf0, 0x06, 0xb5, 0x6c, 0x82, 0x0d, 0xde,
	0xc1, 0x42, 0xa4, 0xea, 0x5f, 0x41, 0x2e, 0x5e, 0xe0, 0x55, 0x8a, 0x77, 0x96, 0x03, 0xe8, 0xb3,
	0x49, 0xe8, 0x5e, 0xe9, 0x47, 0x80, 0xbc, 0x25, 0xf6, 0xe3, 0xc3, 0x5a, 0xbd, 0x07, 0x05, 0x7f,
	0x3a, 0xbc, 0xa2, 0xf6, 0xad, 0xcb, 0xa8, 0x98, 0xca, 0xb0, 0xcf, 0x3f, 0x4d, 0x0e, 0x72, 0x9c,
	0x54, 0x8c, 0x75, 0x0c, 0x53, 0x4f, 0x91, 0x3c, 0xa7, 0xe1, 0x12, 0x21, 0x40, 0x1d, 0xc8, 0xfb,
	0x2c, 0x90, 0x99, 0xed, 0xf3, 0x2d, 0xbb, 0xbc, 0xc9, 0x13, 0xac, 0x21, 0x82, 0x2f, 0xd3, 0x7a,
	0x8a, 0xe4, 0xfc, 0xd8, 0x19, 0x0d, 0x60, 0xcf, 0x67, 0x41, 0xc7, 0xbb, 0x63, 0xe3, 0xb7, 0x23,
	0x59, 0xc4, 0xa8, 0xc9, 0x32, 0x82, 0xbb, 0xf2, 0x2e, 0x6e, 0x81, 0xed, 0xca, 0xb2, 0xca, 0x46,
	0xab, 0xa7, 0xc8, 0xce, 0x9c, 0x34, 0x76, 0x81, 0x5e, 0x03, 0xf2, 0x59, 0x60, 0xdc, 0x39, 0xd3,
	0x96, 0xd7, 0x67, 0x54, 0x4a, 0xc3, 0x8e, 0x39, 0x7a, 0x97, 0xa1, 0x08, 0xc6, 0x87, 0x3f, 0xc6,
	0x22, 0x49, 0xf4, 0x5f, 0x14, 0x28, 0x24, 0xf2, 0xb7, 0xd2, 0xb4, 0x7e, 0x02, 0x99, 0xe0, 0xd6,
	0x65, 0xe1, 0xa4, 0xee, 0x25, 0x16, 0xb5, 0x15, 0x96, 0x81, 0x08, 0x25, 0xf4, 0x35, 0xac, 0xc9,
	0xaa, 0xa6, 0x85, 0xf6, 0x8b, 0x07, 0xad, 0x67, 0x22, 0x31, 0xfa, 0xef, 0x0a, 0xe4, 0xe2, 0x35,
	0x79, 0xc4, 0x52, 0x51, 0xfe, 0xdb, 0xa5, 0xa2, 0xac, 0xbe, 0x54, 0xf4, 0x3f, 0x54, 0xd8, 0x59,
	0xda, 0x05, 0x2b, 0x85, 0x35, 0x80, 0xfc, 0xc8, 0xbb, 0xe3, 0x2d, 0x18, 0x3a, 0xa3, 0x0a, 0x67,
	0x2e, 0x56, 0x6f, 0xbe, 0x72, 0xc7, 0x7c, 0x85, 0x49, 0xb7, 0x43, 0xa5, 0xe3, 0xa1, 0xcb, 0x39,
	0xc9, 0x1e, 0x7a, 0x16, 0x4f, 0x62, 0xfa, 0x51, 0x49, 0x2c, 0xbd, 0x81, 0xed, 0x65, 0x06, 0xd1,
	0xff, 0xa0, 0x10, 0xbd, 0x9f, 0x16, 0xb6, 0xed, 0x46, 0xfb, 0x42, 0x4b, 0xa1, 0xff, 0xc3, 0x8e,
	0x65, 0xf4, 0x30, 0x9d, 0x3d, 0xb5, 0xd1, 0x95, 0xc2, 0xf5, 0xf9, 0xc3, 0x4a, 0xcd, 0xf6, 0x4c,
	0xa8, 0xea, 0xdf, 0x2b, 0x90, 0x8d, 0x35, 0xfe, 0x4a, 0x19, 0x35, 0x41, 0xe3, 0xbb, 0xa3, 0xc9,
	0x9c, 0x09, 0xe3, 0x60, 0xfe, 0x24, 0xca, 0xde, 0x3e, 0x2c, 0xcf, 0xbf, 0xec, 0x66, 0x91, 0x72,
	0xb5, 0xba, 0xe7, 0x46, 0xfb, 0x9f, 0xdc, 0x03, 0x9f, 0x15, 0x20, 0x4f, 0x98, 0xeb, 0x05, 0x91,
	0xca, 0xf1, 0xaf, 0x69, 0x58, 0x0f, 0x6d, 0x22, 0x1d, 0x76, 0xf9, 0xa6, 0x26, 0xf8, 0x65, 0xd7,
	0xc2, 0x36, 0xb5, 0x1b, 0x2d, 0x2c, 0x67, 0x50, 0x4b, 0xa1, 0x0f, 0x40, 0xb7, 0x30, 0xe9, 0x61,
	0x42, 0x09, 0xb6, 0x3a, 0x66, 0xdb, 0xc2, 0xf1, 0x7b, 0x05, 0xed, 0xc3, 0x7b, 0x12, 0x7b, 0xef,
	0x92, 0x1a, 0xd5, 0x4b, 0x4d, 0x45, 0xdb, 0xa0, 0x45, 0xe4, 0xd8, 0x92, 0xe4, 0x5a, 0x1a, 0x15,
	0x61, 0x7b, 0x19, 0xad, 0x96, 0xe1, 0x69, 0x5e, 0x42, 0x58, 0xbd, 0xd4, 0xd6, 0xd0, 0x0e, 0x6c,
	0xc9, 0xab, 0x8e, 0x49, 0xa2, 0x5a, 0x69, 0x4f, 0xd0, 0x33, 0x28, 0x12, 0xdc, 0x32, 0x6d, 0xcc,
	0x93, 0x2f, 0x0b, 0xd9, 0x68, 0x5f, 0xd0, 0x8e, 0x41, 0x0c, 0x6d, 0x1d, 0x7d, 0x08, 0x07, 0x71,
	0xfb, 0xcb, 0xea, 0xad, 0x3d, 0x45, 0x87, 0xb0, 0x1f, 0xe3, 0x58, 0xaa, 0xb4, 0x81, 0x9e, 0xc3,
	0xfb, 0x73, 0xd7, 0x70, 0x42, 0x8b, 0xbb, 0x08, 0xf3, 0x74, 0x48, 0x6b, 0xfc, 0x8d, 0xe3, 0xef,
	0x59, 0xc4, 0x91, 0xe5, 0xf9, 0x8c, 0x19, 0x4a, 0xde, 0xe7, 0x78, 0x30, 0x71, 0x1b, 0x33, 0x05,
	0x4e, 0x9f, 0x3f, 0x7e, 0x01, 0xe8, 0xfe, 0x48, 0xa3, 0x27, 0xa0, 0x8a, 0xcf, 0xbe, 0x75, 0x48,
	0x8b, 0x0f, 0xc2, 0x33, 0xb5, 0xae, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0x85, 0xad, 0x65, 0x1b,
	0x88, 0x0c, 0x00, 0x00,
}
